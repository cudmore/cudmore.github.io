<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Robert Cudmore</title>
 <link href="http://blog.cudmore.io/atom.xml" rel="self"/>
 <link href="http://blog.cudmore.io/"/>
 <updated>2016-03-26T10:31:14-04:00</updated>
 <id>http://blog.cudmore.io</id>
 <author>
   <name>Robert Cudmore</name>
   <email></email>
 </author>

 
 <entry>
   <title>Arduino cli using platformio</title>
   <link href="http://blog.cudmore.io/post/2016/02/13/PlatformIO-an-arduino-ide-cli/"/>
   <updated>2016-02-13T17:01:06-05:00</updated>
   <id>http://blog.cudmore.io/post/2016/02/13/PlatformIO-an-arduino ide cli</id>
   <content type="html">&lt;p&gt;This post describes how to install and run &lt;a href=&quot;http://platformio.org/&quot;&gt;platformio&lt;/a&gt; to compile and upload arduino code via a command line interface (CLI). This is a major breakthrough as it allows writing, compiling, and uploading arduino code on an ARM processor (e.g. Raspberry Pi) and on a Debian server. This allows me to program arduino(s) physically connected to headless machines and circumvents all sorts of silliness around the lack of an Arduino IDE for the ARM platform (shame on you arduino).&lt;/p&gt;

&lt;h3 id=&quot;purpose&quot;&gt;Purpose&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Install and use &lt;a href=&quot;http://platformio.org/&quot;&gt;platformio&lt;/a&gt; to upload code to an Arduino connected by serial.&lt;/li&gt;
  &lt;li&gt;Next post will read form this serial to plot sensor data in a web page using &lt;a href=&quot;http://p5js.org/&quot;&gt;p5.js&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-this-is-big-news&quot;&gt;Why this is big news&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A major advancement here is that platformio comes preconfigured to talk to boards like the &lt;a href=&quot;https://www.pjrc.com/store/teensy32.html&quot;&gt;teensy&lt;/a&gt;, &lt;a href=&quot;https://www.adafruit.com/products/2471&quot;&gt;eps8266&lt;/a&gt;, and &lt;a href=&quot;http://nodemcu.com/index_en.html#fr_54747361d775ef1a3600000f&quot;&gt;node mcu&lt;/a&gt;. I have some of these boards lying around and could never use them with the pi (too much of a hack to get gui arduino ide installed) and never even considered using them on a headless debian server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Running the gui arduino ide on a headless linux box was always a nuisance. I would always have to install, configure and run an X11 server (see &lt;a href=&quot;/post/2015/05/05/X11-on-Raspberry/&quot;&gt;this&lt;/a&gt; post) to pull up the graphic interface on a remote (host) machine.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;install-platformio&quot;&gt;Install platformio&lt;/h3&gt;

&lt;p&gt;Platformio is written in python, so all you need is&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo pip install -U platformio
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;make-a-new-project-directory-and-initialize-an-empty-project&quot;&gt;Make a new project directory and initialize an empty project&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir Sites/p5js_plot
cd Sites/p5js_plot
platformio init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will create&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/src&lt;/li&gt;
  &lt;li&gt;/lib&lt;/li&gt;
  &lt;li&gt;platformio.ini&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;configure-platformioini-with-boards&quot;&gt;Configure platformio.ini with boards&lt;/h3&gt;

&lt;p&gt;Populate platformio.ini with an uno board&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;platformio init --board=uno
platformio init --board nodemcuv2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;platformio.ini looks something like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;; Project Configuration File
; Docs: http://docs.platformio.org/en/latest/projectconf.html

[env:uno]
platform = atmelavr
framework = arduino
board = uno

[env:nodemcu]
platform = espressif
framework = arduino
board = nodemcu
build_flags = -D LED_BUILTIN=BUILTIN_LED

[env:teensy31]
platform = teensy
framework = arduino
board = teensy31

[env:lpmsp430g2553]
platform = timsp430
framework = energia
board = lpmsp430g2553
build_flags = -D LED_BUILTIN=RED_LED
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;put-some-arduino-code-in-srcmaincpp&quot;&gt;Put some arduino code in src/main.cpp&lt;/h3&gt;

&lt;p&gt;Debugging is not as pretty as with a GUI but this is not a problem as arduino code is usually simple and short. The whole arduino gui thing is just overkill in the first place. It is nice to simplify things by returning to a command line.&lt;/p&gt;

&lt;p&gt;Remember, we are programming in C++, NOT the arduino language.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
 * Blink
 * Turns on an LED on for one second,
 * then off for one second, repeatedly.
 */
#include &quot;Arduino.h&quot;

void setup()
{
  // initialize LED digital pin as an output.
  pinMode(LED_BUILTIN, OUTPUT);
}

void loop()
{
  // turn the LED on (HIGH is the voltage level)
  digitalWrite(LED_BUILTIN, HIGH);
  // wait for a second
  delay(1000);
  // turn the LED off by making the voltage LOW
  digitalWrite(LED_BUILTIN, LOW);
   // wait for a second
  delay(1000);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;upload-code-to-arduino&quot;&gt;Upload code to arduino&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# not sure what this does (website says this &#39;processes the source code&#39;, maybe it compiles?
platformio run
# upload the firmware
platformio run --target upload
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first time this is run, platformio automatically downloads the necessary arduino libraries. On a Raspberry Pi 2, the first run took 10.5 seconds, subsequent runs took 2.5 seconds. This is a HUGE time savings over the GUI Arduino IDE.&lt;/p&gt;

&lt;h3 id=&quot;additional-info&quot;&gt;Additional info&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.platformio.org/en/latest/userguide/cmd_serialports.html&quot;&gt;Serial ports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# list serial ports
platformio serialports list
# a Miniterm style serial port monitor (&#39;ctrl+]&#39; to quit)
platformio serialports monitor
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&#39;/dev/ttyACM0&#39; #uno on debian
&#39;/dev/ttyUSB0&#39; #node mcu on debian
&#39;/dev/cu.SLAB_USBtoUART&#39; #node mcu on osx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;platformio.ini for nodemcu needs to know the serial port&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[env:nodemcuv2]
platform = espressif
framework = arduino
board = nodemcuv2
upload_port = /dev/ttyUSB0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Bit Torrent Sync</title>
   <link href="http://blog.cudmore.io/post/2016/01/20/BitTorrent-Sync/"/>
   <updated>2016-01-20T17:01:06-05:00</updated>
   <id>http://blog.cudmore.io/post/2016/01/20/BitTorrent-Sync</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.getsync.com&quot;&gt;BitTorrent Sync&lt;/a&gt; will synchronize folders between any number of machines on either a local LAN, over the internet, or via both. It synchronizes without using a central server as everyone is a peer, it is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Peer-to-peer&quot;&gt;peer-to-peer (P2P) network&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Folders can also be synchronized between machines using the open source OwnCloud or paid Dropbox but neither of them have a command line (headless) synch tool and neither of them will work on a LAN without a central server (they are not P2P). An added perk is that I now have a legitimate alibi if my ISP ever accuses me of pirating over the bittorrent network.&lt;/p&gt;

&lt;p&gt;Benefits&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Neither OwnCloud or Dropbox have headless sync clients (as of January 2016). I want to synchronize code between multiple Raspberry Pi computers and none of them are running a desktop GUI (this is intentional).&lt;/li&gt;
  &lt;li&gt;BitTorrent Sync can work on a local LAN with no internet and never needs a centralized server.&lt;/li&gt;
  &lt;li&gt;There is no limit on drive space.&lt;/li&gt;
  &lt;li&gt;Bit Torrent Sync should be faster.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# debian
wget https://download-cdn.getsync.com/stable/linux-x64/BitTorrent-Sync_x64.tar.gz
tar -zxvf BitTorrent-Sync_x64.tar.gz

# raspberry/arm
wget https://download-cdn.getsync.com/stable/linux-arm/BitTorrent-Sync_arm.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;install-and-run-by-hand&quot;&gt;install and run by hand&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# by default runs on localhost:8888, run as external ip (external meaning on my LAN)
./btsync  --webui.listen 192.168.1.200:8888

# kill daemon
pkill btsync
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;making-btsync-run-at-boot-raspbian&quot;&gt;Making btsync run at boot (raspbian)&lt;/h3&gt;

&lt;p&gt;Add the following to /etc/rc.local&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/pi/btsynch/btsync --webui.listen 192.168.1.60:8888
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;making-btsync-run-at-boot-debian&quot;&gt;Making btsync run at boot (debian)&lt;/h3&gt;

&lt;p&gt;Way more complicated than Rasbian, but, following this perfect github gist:&lt;/p&gt;

&lt;p&gt;https://gist.github.com/MendelGusmao/5398362&lt;/p&gt;

&lt;p&gt;Once all of this is done you can interact with the btsync daemon:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo /etc/init.d/btsync start
sudo /etc/init.d/btsync stop
sudo /etc/init.d/btsync status
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And configure your shares from a browser&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://192.168.1.200:8888
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;move-btsync-binary-into-place&quot;&gt;Move btsync binary into place&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cp ./btsync /usr/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;modify-btsync-daemon-script&quot;&gt;Modify btsync daemon script&lt;/h3&gt;

&lt;p&gt;See below for full script. Careful here, different from btsync binary but SAME name&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mv btsync /etc/init.d/
sudo chmod +x /etc/init.d/btsync
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At this point I thought I could run the daemon without specifying a ~/.sync/config.json file but this does NOT work because the daemon will run inside /etc/init.d/ and try to create a .sync/ folder but it is not allowed to do that there.&lt;/p&gt;

&lt;h3 id=&quot;make-a-sync-folder-in-your-user-directory&quot;&gt;Make a ~/.sync folder in your user directory&lt;/h3&gt;

&lt;p&gt;This is my ~/.sync/config.json. Shared_folders will be specified in web ui. Changes from original gist include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“device_name”: “debian”,&lt;/li&gt;
  &lt;li&gt;“storage_path”: “/home/cudmore/.sync”,&lt;/li&gt;
  &lt;li&gt;“listen”: “192.168.1.200:8888”,&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;device_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debian&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;listening_port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;storage_path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/cudmore/.sync&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;check_for_updates&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;use_upnp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;download_limit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;                       
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;upload_limit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;webui&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;listen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.200:8888&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;shared_folders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is my modified /etc/init.d/btsync daemon script. Well, not really modified except for changing BTSYNC_USER.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### BEGIN INIT INFO&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Provides: btsync&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Required-Start: $local_fs $remote_fs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Required-Stop: $local_fs $remote_fs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Should-Start: $network&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Should-Stop: $network&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Default-Start: 2 3 4 5&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Default-Stop: 0 1 6&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Short-Description: Multi-user daemonized version of btsync.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Description: Starts the btsync daemon for all registered users.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### END INIT INFO&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Replace with linux users you want to run BTSync clients for&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BTSYNC_USERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cudmore&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DAEMON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/btsync

start&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;btsuser &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BTSYNC_USERS&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOMEDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;getent passwd &lt;span class=&quot;nv&quot;&gt;$btsuser&lt;/span&gt; | cut -d: -f6&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOMEDIR&lt;/span&gt;/.sync/config.json
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Starting BTSync for &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$btsuser&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      start-stop-daemon -b -o -c &lt;span class=&quot;nv&quot;&gt;$btsuser&lt;/span&gt; -S -u &lt;span class=&quot;nv&quot;&gt;$btsuser&lt;/span&gt; -x &lt;span class=&quot;nv&quot;&gt;$DAEMON&lt;/span&gt; -- --config &lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Couldn&#39;t start BTSync for &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$btsuser&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; (no &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; found)&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
  done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

stop&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;btsuser &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BTSYNC_USERS&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dbpid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;pgrep -fu &lt;span class=&quot;nv&quot;&gt;$btsuser&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DAEMON&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -z &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbpid&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Stopping btsync for &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$btsuser&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      start-stop-daemon -o -c &lt;span class=&quot;nv&quot;&gt;$btsuser&lt;/span&gt; -K -u &lt;span class=&quot;nv&quot;&gt;$btsuser&lt;/span&gt; -x &lt;span class=&quot;nv&quot;&gt;$DAEMON&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
  done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

status&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;btsuser &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BTSYNC_USERS&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dbpid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;pgrep -fu &lt;span class=&quot;nv&quot;&gt;$btsuser&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DAEMON&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbpid&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;btsync for USER &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$btsuser&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: not running.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;btsync for USER &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$btsuser&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: running (pid &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dbpid&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
  done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
 &lt;/span&gt;start&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
start
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
stop&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
stop
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
restart|reload|force-reload&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
stop
start
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
status&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
status
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: /etc/init.d/btsync {start|stop|reload|force-reload|restart|status}&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;esac

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>MQTT</title>
   <link href="http://blog.cudmore.io/post/2016/01/19/MQTT/"/>
   <updated>2016-01-19T17:01:06-05:00</updated>
   <id>http://blog.cudmore.io/post/2016/01/19/MQTT</id>
   <content type="html">&lt;p&gt;Use &lt;a href=&quot;http://mqtt.org&quot;&gt;MQTT&lt;/a&gt; to send little packets of data around. My current thinking is that any sensor/data network should be a mixture of MQTT and &lt;a href=&quot;http://rest.elkstein.org&quot;&gt;Rest&lt;/a&gt;. They are different things and both provide some nice features. I like MQTT because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My sensors (like an Arduino) can push data without caring who will subscribe.&lt;/li&gt;
  &lt;li&gt;My data subscribers don’t need to know the ip/web address of a sensor, only the MQTT broker address.&lt;/li&gt;
  &lt;li&gt;Downside is this is all assuming and contingent on an MQTT broker (e.g. a server).&lt;/li&gt;
  &lt;li&gt;On the flip side, if I use REST then every device (including sensors) needs to be running a http server. Too many servers.&lt;/li&gt;
  &lt;li&gt;In the end, the best solution is a heterogeneous system with both REST and MQTT.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will update this post as it evolves.&lt;/p&gt;

&lt;h3 id=&quot;install-mosquitto2-mqtt-broker-on-debian-server&quot;&gt;Install &lt;a href=&quot;http://mosquitto.org&quot;&gt;mosquitto&lt;/a&gt; mqtt broker on debian server&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install mosquitto mosquitto-clients
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;start-and-stop-mosquitto-debian-jessie&quot;&gt;Start and stop mosquitto (Debian Jessie)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl start mosquitto
sudo systemctl stop mosquitto
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;to-do-figure-out-how-to-run-at-startup&quot;&gt;[To Do] Figure out how to run at startup???&lt;/h3&gt;

&lt;p&gt;Following &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units&quot;&gt;this&lt;/a&gt; post I think it is just …&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl enable application.service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But I need to check this.&lt;/p&gt;

&lt;h3 id=&quot;to-do-get-pushsend-and-subscribe-working-on-an-arduino&quot;&gt;[To Do] Get push/send and subscribe working on an Arduino&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&quot;http://pubsubclient.knolleary.net&quot;&gt;pubsubclient&lt;/a&gt; library. And get an &lt;a href=&quot;http://esp8266.com&quot;&gt;ESP8266&lt;/a&gt; wifi chip working. The ESP8266 wifi chip is its own revolution. See chips from &lt;a href=&quot;https://www.sparkfun.com/products/13678&quot;&gt;Sparkfun&lt;/a&gt;, &lt;a href=&quot;https://learn.adafruit.com/adafruit-huzzah-esp8266-breakout/overview&quot;&gt;Adafruit&lt;/a&gt;, and a writeup in &lt;a href=&quot;http://makezine.com/2015/04/01/esp8266-5-microcontroller-wi-fi-now-arduino-compatible/&quot;&gt;Make&lt;/a&gt;. For this chip I have taken the plunge and made my first direct from China purchases on &lt;a href=&quot;http://www.aliexpress.com/af/esp8266.html?ltype=wholesale&amp;amp;d=y&amp;amp;origin=n&amp;amp;isViewCP=y&amp;amp;catId=0&amp;amp;initiative_id=AS_20160120203616&amp;amp;SearchText=esp8266&quot;&gt;Ali Express&lt;/a&gt;. The chips at &lt;a href=&quot;http://www.aliexpress.com&quot;&gt;Ali Express&lt;/a&gt; are ~ 5x cheaper. I love this stuff.&lt;/p&gt;

&lt;h3 id=&quot;python-publisher-script&quot;&gt;Python publisher script&lt;/h3&gt;

&lt;p&gt;This script publishes data (timestamps for now) every second into the loft/motion1 topic on a mqtt broker.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# post to an mqtt topic&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;paho.mqtt.client&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;paho&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mqttc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paho&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;192.168.1.200&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# the address of the mqtt broker&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;loft/motion1&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1883&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mosq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;on_connect() &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;mqttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_connect&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connecting to &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mqttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# if connection to broker is lost and then regained, on_connect() gets called&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mqttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;starting infinite loop&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# publish some data at a regular interval&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mqttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;H:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;M:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;S&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;python-subscriber-script&quot;&gt;Python subscriber script&lt;/h3&gt;

&lt;p&gt;This script subscribes to the topic loft/motion1 on a mqtt broker. Whenever there is new data in the topic, on_message() gets called.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# subscribe to an mqtt topic&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;paho.mqtt.client&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;paho&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mqttc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paho&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;192.168.1.200&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# the address of the mqtt broker&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;loft/motion1&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1883&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mosq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;on_connect() rc=&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;   subscribing to&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mqttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mosq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;granted_qos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Subscribed OK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mosq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;on_message() topic: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; payload: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mqttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_connect&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mqttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_subscribe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_subscribe&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mqttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_message&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Connect and subscribe&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connecting to &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mqttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# if connection to broker is lost and then regained, on_connect() get called&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mqttc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;starting infinite loop&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aaa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mqtt-on-an-esp8266&quot;&gt;MQTT On an ESP8266&lt;/h3&gt;

&lt;p&gt;Now publish/subscribe to the MQTT broker using an ESP8266&lt;/p&gt;

&lt;p&gt;https://github.com/knolleary/pubsubclient/blob/master/examples/mqtt_esp8266/mqtt_esp8266.ino&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Camera with a REST interface</title>
   <link href="http://blog.cudmore.io/post/2015/12/06/camera-with-a-rest-interface/"/>
   <updated>2015-12-06T17:01:06-05:00</updated>
   <id>http://blog.cudmore.io/post/2015/12/06/camera-with-a-rest-interface</id>
   <content type="html">&lt;p&gt;I’ve written a few versions of this. In previous versions I would control everything from a Python prompt, or a complex flask app, or use DIO to trigger video.&lt;/p&gt;

&lt;p&gt;In this version I am trying to keep it simple and starting/stopping video and timelapse images with a REST api.&lt;/p&gt;

&lt;p&gt;To test this out, I will have a motion sensor on another Pi send a REST command to start video when it senses motion.&lt;/p&gt;

&lt;p&gt;VideoServer.py is using a circular stream such that when recording is started, it also saves ‘pre-triggered’ video before recording was started. It can also capture timelapse images while it is recording video. The Raspberry camera is very nice for these two features. I’ve written VideoServer as a class inheriting from &lt;a href=&quot;https://docs.python.org/2/library/threading.html&quot;&gt;threading.Thread&lt;/a&gt; so it can run daemonized as a background thread, otherwise it will block other code.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VideoServer.py, controls the camera with the following interface:
    &lt;ul&gt;
      &lt;li&gt;startArm(), initializes the camera.&lt;/li&gt;
      &lt;li&gt;stopArm(), release the camera.&lt;/li&gt;
      &lt;li&gt;startVideo(), starts video recording.&lt;/li&gt;
      &lt;li&gt;stopVideo(), stops video recording&lt;/li&gt;
      &lt;li&gt;doTimelapse=1, starts acquiring timelapse images&lt;/li&gt;
      &lt;li&gt;doTimelapse=0, stops acquiring timelapse images&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;timelapse_app.py, starts a flask webserver which provides a REST api as a wrapper around VideoServer.py:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     http://192.168.1.12:5010/startarm
     http://192.168.1.12:5010/stoparm
     http://192.168.1.12:5010/startvideo
     http://192.168.1.12:5010/stopvideo
     http://192.168.1.12:5010/timelapseon
     http://192.168.1.12:5010/timelapseoff
     http://192.168.1.12:5010/lastimage
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;To Do:&lt;/strong&gt; I still need to expose ‘bufferSeconds’ and ‘stillinterval’ to the REST API.&lt;/p&gt;

&lt;h3 id=&quot;get-the-last-timelapse-image-in-a-browser-or-with-curl&quot;&gt;Get the last timelapse image in a browser or with curl&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# display in browser
http://192.168.1.12:5010/lastimage
# save from command line
curl -o http://192.168.1.12:5010/lastimage
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rsync-the-images-and-video-to-a-remote-host&quot;&gt;rsync the images and video to a remote host&lt;/h3&gt;

&lt;p&gt;Now I want to get the videos/images off the machine with the camera. There are more options than I can count but here are three:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Push the recorded video/images to another server from within Python/Flask. I’ve done this before with &lt;a href=&quot;http://www.paramiko.org&quot;&gt;Paramiko&lt;/a&gt; but have always had problems with the code hanging or exceptions thrown when a network connection is lost.&lt;/li&gt;
  &lt;li&gt;Have another machine (also running flask) pull the images off the camera machine. This can be done with the /lastimage REST path. This requires the other machine to be running server code itself and to have some sort of timer.&lt;/li&gt;
  &lt;li&gt;Use &lt;strong&gt;rsynch&lt;/strong&gt; on the machine running the camera to a push videos/images to a remote server and use &lt;strong&gt;cron&lt;/strong&gt; to do this at a regular interval.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will use rsynch to push the images to a remote server. Follow &lt;a href=&quot;http://troy.jdmz.net/rsync/index.html&quot;&gt;this&lt;/a&gt; for a really thorough explanation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# assuming you have a folder &#39;securitycam&#39; on remote host
rsync -avz /home/pi/video/20151206/ -e ssh cudmore@192.168.1.200:securitycam
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Make sure you can &lt;a href=&quot;http://127.0.0.1:4000/post/2015/05/04/Auto-login-to-ssh-server/&quot;&gt;login to remote server&lt;/a&gt; without entering a password&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add this
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Run rsynch command every 10 minutes with crontab&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*/10 * * * * /usr/bin/rsync -avz /home/pi/video/20151206/ -e ssh cudmore@192.168.1.200:securitycam
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;here-is-a-gist-with-videoserverpy-and-timelapseapppy&quot;&gt;Here is a gist with VideoServer.py and timelapse_app.py&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/cudmore/c4ab92d288cfd1778be5.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>Raspberry Wifi</title>
   <link href="http://blog.cudmore.io/post/2015/12/05/raspberry-wifi/"/>
   <updated>2015-12-05T17:01:06-05:00</updated>
   <id>http://blog.cudmore.io/post/2015/12/05/raspberry-wifi</id>
   <content type="html">&lt;p&gt;Yet another blog post on getting the Raspberry Pi up on a wifi network.&lt;/p&gt;

&lt;h3 id=&quot;configure-etcnetworkinterfaces&quot;&gt;Configure /etc/network/interfaces&lt;/h3&gt;

&lt;p&gt;The stock install of Raspian should already have this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo pico /etc/network/interfaces
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto lo

iface lo inet loopback
iface eth0 inet dhcp

allow-hotplug wlan0
iface wlan0 inet manual
wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
iface default inet dhcp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;edit-wpasupplicantconf&quot;&gt;Edit wpa_supplicant.conf&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo pico /etc/wpa_supplicant/wpa_supplicant.conf 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
    ssid=&quot;NETGEAR28&quot;
    psk=&quot;your_password_here&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;tell-your-router-to-assign-an-ip-based-on-mac-address-of-wifi-adapter&quot;&gt;Tell your router to assign an ip based on MAC address of wifi adapter&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig wlan0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The MAC address is listed as ‘HWaddr’ and in this case is ‘00:0b:81:89:11:8a’.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wlan0     Link encap:Ethernet  HWaddr 00:0b:81:89:11:8a  
          inet addr:192.168.1.12  Bcast:192.168.1.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1112 errors:0 dropped:837 overruns:0 frame:0
          TX packets:348 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:253265 (247.3 KiB)  TX bytes:56154 (54.8 KiB)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;change-the-default-name-of-your-pi-in-apple-file-protocol-eg-netatalk&quot;&gt;Change the default name of your Pi in Apple-File-Protocol (e.g. Netatalk)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# stop netatalk
sudo /etc/init.d/netatalk stop

# edit config file
sudo nano /etc/netatalk/AppleVolumes.default

# change this one line

# By default all users have access to their home directories.
#~/                     &quot;Home Directory&quot;
~/                      &quot;pi50&quot;

# restart netatalk
sudo /etc/init.d/netatalk start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;startup-mailer&quot;&gt;Startup mailer&lt;/h3&gt;

&lt;p&gt;Purpose here is to have your Pi email you when it gets a network connection. This is very useful (and necessary) if the IP is changing with automatic DHCP.&lt;/p&gt;

&lt;p&gt;This is startup_mailer.py (in all its crappy code style)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import subprocess
import smtplib
import socket
import os
from email.mime.text import MIMEText
import datetime
import sys

eventText = &#39;&#39;
if len( sys.argv ) &amp;gt; 1:
    eventText = sys.argv[1]
# Change to your own account information
to = &#39;robert.cudmore@gmail.com&#39;
gmail_user = &#39;cudmore.raspberry&#39;
gmail_password = &#39;your_password_here&#39;
smtpserver = smtplib.SMTP(&#39;smtp.gmail.com&#39;, 587)
smtpserver.ehlo()
smtpserver.starttls()
smtpserver.ehlo
smtpserver.login(gmail_user, gmail_password)

# a linux command line call
arg=&#39;ip route list&#39;
p=subprocess.Popen(arg,shell=True,stdout=subprocess.PIPE)
data = p.communicate()
split_data = data[0].split()

ipaddr = split_data[split_data.index(&#39;src&#39;)+1]
routerAddress = split_data[split_data.index(&#39;via&#39;)+1]

# eventText is parameter to this function
mail_body = &#39;raspberrycam2 %s:\n&#39; % eventText
mail_body += &#39;IP: %s\n&#39; % ipaddr
mail_body += &#39;router: %s&#39; % routerAddress

today = datetime.date.today()
timeStr = today.strftime(&#39;%b %d %Y&#39;)

mail_subject = &#39;pi50 booted at ip &#39; + ipaddr + &#39; &#39; + eventText + &#39; on %s&#39; % time
Str

msg = MIMEText(mail_body)
msg[&#39;Subject&#39;] = mail_subject
msg[&#39;From&#39;] = gmail_user
msg[&#39;To&#39;] = to
smtpserver.sendmail(gmail_user, [to], msg.as_string())
smtpserver.quit()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;another-version-of-my-startupmailerpy&quot;&gt;Another version of my startup_mailer.py&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import subprocess
import smtplib
import socket
import os
from email.mime.text import MIMEText
from datetime import datetime, date, time

# Change to your own account information
to = &#39;robert.cudmore@gmail.com&#39;
gmail_user = &#39;cudmore.raspberry@gmail.com&#39;
gmail_password = &#39;your_password_here&#39;
smtpserver = smtplib.SMTP(&#39;smtp.gmail.com&#39;, 587)
smtpserver.ehlo()
smtpserver.starttls()
smtpserver.ehlo
smtpserver.login(gmail_user, gmail_password)

dt=datetime.now()  

# Very Linux Specific
arg=&#39;ip route list&#39;
p=subprocess.Popen(arg,shell=True,stdout=subprocess.PIPE)
data = p.communicate()
split_data = data[0].split()
ipaddr = split_data[split_data.index(&#39;src&#39;)+1]
mail_body = &#39;raspberrycam2 booted with IP: %s&#39; %  ipaddr
msg = MIMEText(mail_body)
msg[&#39;Subject&#39;] = &#39;raspberrycam2 @ &#39;+ipaddr+&#39; BOOT on %s&#39; % dt.strftime(&#39;%b %d %Y, %H:%M:%S&#39;)
msg[&#39;From&#39;] = gmail_user
msg[&#39;To&#39;] = to
smtpserver.sendmail(gmail_user, [to], msg.as_string())
smtpserver.quit()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;edit-etcrclocal&quot;&gt;Edit /etc/rc.local&lt;/h3&gt;

&lt;p&gt;rc.local will run code each itme a user logs in.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh -e&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# rc.local&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This script is executed at the end of each multiuser runlevel.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Make sure that the script will &quot;exit 0&quot; on success or any other&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# value on error.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# In order to enable or disable this script just change the execution&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# bits.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# By default this script does nothing.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Print the IP address&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;_IP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;hostname -I&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_IP&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;My IP address is %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_IP&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  python /home/pi/code/startup_mailer.py
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;useful-network-commands&quot;&gt;Useful network commands&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# scan for available wifi networks
sudo iwlist wlan0 scan
# show network adapter status
ifconfig wlan0
# turn off and on network adapter
sudo ifdown wlan0
sudo ifup wlan0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>particle cloud server</title>
   <link href="http://blog.cudmore.io/post/2015/12/01/particle-cloud-server/"/>
   <updated>2015-12-01T17:01:06-05:00</updated>
   <id>http://blog.cudmore.io/post/2015/12/01/particle-cloud-server</id>
   <content type="html">&lt;h4 id=&quot;this-is-not-working--as-of-1232015-i-will-just-wait-for-the-particle-people-to-update-the-particle-server-with-better-support-for-the-photon-it-is-really-designed-for-the-particle&quot;&gt;This is not working … as of 12/3/2015 I will just wait for the particle people to update the particle-server with better support for the photon (it is really designed for the particle.&lt;/h4&gt;

&lt;p&gt;The paticle photon is a great little wifi enabled arduino. The only problem I have is that all read/write using its REST API requires internet acces to a particle.io account. To get around this, you can run a particle cloud server locally.&lt;/p&gt;

&lt;p&gt;I am doing all of this on a Debian Jessie server.&lt;/p&gt;

&lt;h4 id=&quot;install-git&quot;&gt;install git&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;install-nodejs-use-su-to-enter-suroot&quot;&gt;install nodejs (use su to enter su/root)&lt;/h4&gt;
&lt;p&gt;Following: https://github.com/nodesource/distributions&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_4.x | bash -
apt-get install -y nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;install-particle-cli&quot;&gt;Install particle cli&lt;/h4&gt;
&lt;p&gt;Following: https://github.com/spark/particle-cli&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo npm install -g particle-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;install-particle-cloud-server&quot;&gt;Install particle cloud server&lt;/h4&gt;
&lt;p&gt;Following: https://github.com/spark/spark-server/&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/spark/spark-server.git
cd spark-server
npm install
node main.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;‘node main.js’ produced&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-------
No users exist, you should create some users!
-------
connect.multipart() will be removed in connect 3.0
visit https://github.com/senchalabs/connect/wiki/Connect-3.0 for alternatives
connect.limit() will be removed in connect 3.0
Starting server, listening on 8080
static class init!
core keys directory didn&#39;t exist, creating... /home/cudmore/spark-server/core_keys
Creating NEW server key
Loading server key from default_key.pem
set server key
server public key is:  -----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz3oPu+QsNdQaVgk+e4nS
zmTxop7vVamrKdIpio04yoY9pKPmkORAmM0VdFgYKinn094cHERm+LFdDhSAtWtn
TIErdd3o2ntoyZoYLC30Q2Mwvb+AzvGRcrW7jk+72up6YbXMZi2lhRs9M5Qe7use
mXy96PiRP7tYD+Yj+k0t3bDF+lfiWHuuG/yV2/hQaQ8ADfqtWvX4XyLMC9XS2m94
HhFy83sWPcRcB7BZUr1A8w503vB+gZWlt8W+uPlbUmbF+P8LzZmE4Twn87EcMeTB
qGvBxjWypHF95jDzZCie5/glZtunmH905Lb12y1eWLY29KPPk8BcpIzPJ5xc8mKk
gQIDAQAB
-----END PUBLIC KEY-----

Your server IP address is: 192.168.1.200
server started { host: &#39;localhost&#39;, port: 5683 }

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;continue-setting-up-particle-server&quot;&gt;Continue setting up particle server&lt;/h4&gt;
&lt;p&gt;Install &lt;a href=&quot;http://dfu-util.sourceforge.net&quot;&gt;dfu-utils&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	# git clone git://git.code.sf.net/p/dfu-util/dfu-util
	sudo apt-get build-dep dfu-util
	sudo apt-get install libusb-1.0-0-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But that did not work so i did&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get upgrade dfu-util
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This updated a boat load of things including jre and owncloud (leaving it in maintenance mode). To turn owncloud maintenance mode off, follow &lt;a href=&quot;https://doc.owncloud.org/server/8.0/admin_manual/maintenance/enable_maintenance.html&quot;&gt;this&lt;/a&gt; and edit /var/www/owncloud/config/config.php and set ‘maintenance’ =&amp;gt; false,’. The next time I logged into my owncloud server it triggered an update to 8.2.1&lt;/p&gt;

&lt;p&gt;Try again with particle photon plugged in via usb&lt;/p&gt;

&lt;p&gt;Still following: https://github.com/spark/spark-server/&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;particle keys server default_key.pub.pem 192.168.1.10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;gave&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cudmore@debian:~/spark-server$ sudo particle keys server default_key.pub.pem 192.168.1.200
running dfu-util -l
Found DFU device 2b04:d006
checking file  default_key.pub192_168_1_200.der
spawning dfu-util -d 2b04:d006 -a 1 -i 0 -s 2082 -D default_key.pub192_168_1_200.der
dfu-util 0.8

Copyright 2005-2009 Weston Schmidt, Harald Welte and OpenMoko Inc.
Copyright 2010-2014 Tormod Volden and Stefan Schmidt
This program is Free Software and has ABSOLUTELY NO WARRANTY
Please report bugs to dfu-util@lists.gnumonks.org

dfu-util: Invalid DFU suffix signature
dfu-util: A valid DFU suffix will be required in a future dfu-util release!!!
Opening DFU capable USB device...
ID 2b04:d006
Run-time device DFU version 011a
Claiming USB DFU Interface...
Setting Alternate Setting # 1 ...
Determining device status: state = dfuIDLE, status = 0
dfuIDLE, continuing
DFU mode device DFU version 011a
Device returned transfer size 4096
DfuSe interface name: &quot;DCT Flash   &quot;
Downloading to address = 0x00000822, size = 1024
Download	[=========================] 100%         1024 bytes
Download done.
File downloaded successfully
Okay!  New keys in place, your device will not restart.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>debian server</title>
   <link href="http://blog.cudmore.io/post/2015/11/07/debian-server/"/>
   <updated>2015-11-07T17:01:06-05:00</updated>
   <id>http://blog.cudmore.io/post/2015/11/07/debian-server</id>
   <content type="html">&lt;p&gt;Goal is to set up a home server running Debain Jessie.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Share files with afp and smb&lt;/li&gt;
  &lt;li&gt;Run basic python scripts&lt;/li&gt;
  &lt;li&gt;Run flask servers on various ports&lt;/li&gt;
  &lt;li&gt;Run an apache web server (not really set up)&lt;/li&gt;
  &lt;li&gt;Run owncloud (synch clients are still slow)&lt;/li&gt;
  &lt;li&gt;Run transmission for torrent download&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-hardware-is-as-follows&quot;&gt;0) The hardware is as follows&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;See my pcpartspicker &lt;a href=&quot;http://pcpartpicker.com/p/PRq8Vn&quot;&gt;inventory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Processor: Intel Pentium G3258 3.2GHz Dual-Core Processor&lt;/li&gt;
  &lt;li&gt;Motherboard: Gigabyte GA-H97N-WIFI Mini ITX LGA1150 Motherboard&lt;/li&gt;
  &lt;li&gt;RAM: G.Skill Sniper Series 8GB (2 x 4GB) DDR3-1866 Memory&lt;/li&gt;
  &lt;li&gt;Case: Cooler Master Elite 110 Mini ITX Tower Case&lt;/li&gt;
  &lt;li&gt;Power: EVGA 430W 80+ Certified ATX&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;download-and-install-debian&quot;&gt;1) Download and install debian&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Download debian jessie&lt;/li&gt;
  &lt;li&gt;Make a usb key&lt;/li&gt;
  &lt;li&gt;Install debian&lt;/li&gt;
  &lt;li&gt;Check your debian version&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  cat /etc/debian_version 
  8.2
 &lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;configure-debian-jessie&quot;&gt;2) Configure debian jessie&lt;/h3&gt;

&lt;h4 id=&quot;update-your-repositories&quot;&gt;Update your repositories&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  apt-get update
 &lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;ssh&quot;&gt;ssh&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  apt-get install openssh-server
 &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Follow &lt;a href=&quot;https://wiki.debian.org/SSH# Installation_of_the_server&quot;&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;sudo&quot;&gt;Sudo&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Use apt-get to install sudo. This is better then switching to su.&lt;/li&gt;
  &lt;li&gt;Follow &lt;a href=&quot;https://wiki.debian.org/sudo&quot;&gt;this&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;add-in-a-second-hard-drive&quot;&gt;Add in a second hard drive&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;partition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  cfdisk /dev/sdb
 &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;format&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  mkfs.ext4 /dev/sdb1
 &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Once disk is partitioned and formatted, this is what it looks like&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```
  cudmore@debian:~$ sudo fdisk -l /dev/sdb
  Disk /dev/sdb: 1.8 TiB, 2000398934016 bytes, 3907029168 sectors
  Units: sectors of 1 * 512 = 512 bytes
  Sector size (logical/physical): 512 bytes / 512 bytes
  I/O size (minimum/optimal): 512 bytes / 512 bytes
  Disklabel type: gpt
  Disk identifier: 8B1D619B-4B38-44AE-AEE1-0180F07FC75F&lt;/p&gt;

&lt;p&gt;Device     Start        End    Sectors  Size Type
  /dev/sdb1   2048 3907029134 3907027087  1.8T Linux filesystem
  ```&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mount the second harddrive in a folder /movies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  mkdir /movies # remember to set group and group rwx later
  mount -t ext4 /dev/sdb1 /movies
 &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;blkid to get unique name for fstab entry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  cudmore@debian:~$ sudo blkid
  /dev/sda1: UUID=&quot;30EE-7B6B&quot; TYPE=&quot;vfat&quot; PARTUUID=&quot;1eae1e11-6902-45f9-9c27-55ab648972b3&quot;
  /dev/sda2: UUID=&quot;2cf97347-1baf-4abf-a297-650ebf4dfdff&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;15ac40fa-5874-423b-9282-209a8b88a60a&quot;
  /dev/sda3: UUID=&quot;16a7a205-220c-4583-a758-4fcaf3eb0417&quot; TYPE=&quot;swap&quot; PARTUUID=&quot;fa435c81-ab1e-4192-97ba-e55c08ceb932&quot;
  /dev/sdb1: UUID=&quot;f6b5096b-188b-4204-92aa-31e8c58e0eb6&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;61e5434f-7975-45a8-a8c4-6148fb56f9b4&quot;
 &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Append the new disk to /etc/fstab&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  cudmore@debian:~$ more /etc/fstab 
  # /etc/fstab: static file system information.
  #
  # Use &#39;blkid&#39; to print the universally unique identifier for a
  # device; this may be used with UUID= as a more robust way to name devices
  # that works even if disks are added and removed. See fstab(5).
  #
  # &amp;lt;file system&amp;gt; &amp;lt;mount point&amp;gt;   &amp;lt;type&amp;gt;  &amp;lt;options&amp;gt;       &amp;lt;dump&amp;gt;  &amp;lt;pass&amp;gt;
  # / was on /dev/sda2 during installation
  UUID=2cf97347-1baf-4abf-a297-650ebf4dfdff /               ext4    errors=remount-ro 0       1
  # /boot/efi was on /dev/sda1 during installation
  UUID=30EE-7B6B  /boot/efi       vfat    umask=0077      0       1
  # swap was on /dev/sda3 during installation
  UUID=16a7a205-220c-4583-a758-4fcaf3eb0417 none            swap    sw              0       0
  # 2tb drive for movies
  UUID=f6b5096b-188b-4204-92aa-31e8c58e0eb6 /movies ext4 errors=remount-ro 0 1
 &lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;users-and-groups&quot;&gt;Users and groups&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Make a second user ‘user2’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  sudo adduser user2
 &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make a group ‘movies’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  sudo addgroup movies
 &lt;/code&gt;
  - Add myself (user1) and user2 to the ‘movies’ group&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  sudo usermod -a -G movies user1
  sudo usermod -a -G movies user2
 &lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;make-second-harddrive-rwx-for-group-movies&quot;&gt;Make second harddrive rwx for group ‘movies’&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;make sure the second hard drive has rwx permission for group ‘movies’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  # the first &#39;movies&#39; is the name of the group, the second /movies is the folder
  sudo chgrp -R movies /movies
  sudo chmod -R g+rwx /movies
 &lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;apple-file-protocol-afp&quot;&gt;Apple-File-Protocol (afp)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Follow &lt;a href=&quot;http://netatalk.sourceforge.net/wiki/index.php/Install_Netatalk_3.1.7_on_Debian_8_Jessie&quot;&gt;debian jessie afp install guide&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;I am using netatalk-3.1.7&lt;/li&gt;
  &lt;li&gt;Modify /usr/local/etc/afp.conf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key here is to specify the name of the mount point using ‘home name = $u_server’. Otherwise your mount point becomes ‘[[user]]’s home’ and programs like Microsoft Word and Fiji will probably not find the path with the apostrophe in the name.&lt;/p&gt;

&lt;p&gt;$u is a variable that inserts the current username. It is defined in the &lt;a href=&quot;http://netatalk.sourceforge.net/3.0/htmldocs/afp.conf.5.html&quot;&gt;afp.conf&lt;/a&gt; documentation.&lt;/p&gt;

&lt;p&gt;[movie_server] is a mount point that will mount my second hard drive from folder /movies.&lt;/p&gt;

&lt;p&gt;```
  ;
  ; Netatalk 3.x configuration file
  ;&lt;/p&gt;

&lt;p&gt;[Global]
  ; Global server settings&lt;/p&gt;

&lt;p&gt;[Homes]
  ; basedir regex = /xxxx
    ;user1 will mount as user1_server
    home name = $u_server
    basedir regex = /home&lt;/p&gt;

&lt;p&gt;; [My AFP Volume]
  ; path = /path/to/volume&lt;/p&gt;

&lt;p&gt;[movies_server]
  path = /movies
  ```&lt;/p&gt;

&lt;h4 id=&quot;remote-desktop-with-vnc&quot;&gt;Remote desktop with vnc&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;This is not working. May be jessie bug?&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://linuxconfig.org/quick-vnc-server-client-setup-on-debian-linux-jessie-8&quot;&gt;plagiarized guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;install-anaconda-python&quot;&gt;Install Anaconda (Python)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Download and follow &lt;a href=&quot;http://docs.continuum.io/anaconda/install# linux-install&quot;&gt;these&lt;/a&gt; instructions on website&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;configure-duckdnshttpswwwduckdnsorg-to-keep-your-externalrouter-ip-up-to-date&quot;&gt;Configure &lt;a href=&quot;https://www.duckdns.org&quot;&gt;duckdns&lt;/a&gt; to keep your external/router ip up to date&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Follow &lt;a href=&quot;https://www.duckdns.org/install.jsp&quot;&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;install-sambasmb-file-sharing&quot;&gt;Install samba/smb file sharing&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Follow something like &lt;a href=&quot;https://wiki.debian.org/SambaServerSimple&quot;&gt;this&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;edit with ‘sudo pico /etc/samba/smb.conf’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  [movies_server]
   comment = movies on debian server
   read only = no
   locking = no
   path = /path_to_our_files
   guest ok = no
  &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Restart samba
   &lt;code class=&quot;highlighter-rouge&quot;&gt;
   sudo /etc/init.d/samba restart
  &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;run-python-scripts-at-boot&quot;&gt;Run python scripts at boot&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;This is very unclear to me&lt;/li&gt;
  &lt;li&gt;Directly edit ‘sudo pico /etc/crontab’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  @reboot root /home/cudmore/anaconda2/bin/python /home/cudmore/Sites/temperatureserver/app.py &amp;gt;&amp;gt; /home/cudmore/Sites/temperatureserver/temperatureserver.log 2&amp;gt;&amp;amp;1
 &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I want this to redirect stdout to the .log file. It is redirecting when it starts up but is not redirecting my ‘print’ statements as it runs?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;transmission-torrent-download&quot;&gt;Transmission (torrent download)&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  sudo apt-get install transmission
  sudo apt-get install transmission-daemon
 &lt;/code&gt;
  - Follow very specific instructions &lt;a href=&quot;https://trac.transmissionbt.com/wiki/HeadlessUsage/General&quot;&gt;here&lt;/a&gt;
  - &lt;a href=&quot;https://help.ubuntu.com/community/TransmissionHowTo&quot;&gt;this&lt;/a&gt; might be more useful.
  - Modify /var/lib/transmission-daemon/info/settings.json&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  &quot;download-dir&quot;: &quot;/movies/transmission_download&quot;,
  &quot;rpc-whitelist&quot;: &quot;127.0.0.1,192.168.*.*&quot;,
  &quot;rpc-authentication-required&quot;: false,
 &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Maybe add transmissions user to ‘movies’ group? (movies group was made above).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  sudo usermod -a -G movies transmission
 &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;That didn’t work (maybe I needed a -R). Fuck all this security anyways.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  sudo chmod -R a+rwx /movies/transmission_download/
 &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure to stop and then start daemon when editing the configuration file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  sudo service transmission-daemon stop
  sudo nano /var/lib/transmission-daemon/info/settings.json
  sudo service transmission-daemon start
 &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Access transmissions via web interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  http://192.168.1.200:9091
 &lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;My downloads were getting user/group debian-transmission. This will add user cudmore to group debian-transmission&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
  sudo usermod -a -G debian-transmission cudmore 
 &lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;install-particle-cloud-server&quot;&gt;Install particle cloud server&lt;/h4&gt;

&lt;p&gt;see &lt;a href=&quot;http://blog.cudmore.io/post/2015/12/01/particle-cloud-server/&quot;&gt;other blog post&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>remote sensors</title>
   <link href="http://blog.cudmore.io/post/2015/09/07/remote-sensors/"/>
   <updated>2015-09-07T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/09/07/remote-sensors</id>
   <content type="html">&lt;p&gt;A distributed client sensor to data server network.&lt;/p&gt;

&lt;h3 id=&quot;this-description-is-becoming-kind-of-bullshit&quot;&gt;This description is becoming kind of bullshit&lt;/h3&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Client sensors transmit to data server(s) via http/rest interface.&lt;/li&gt;
  &lt;li&gt;Data servers receive client sensor data and log it to a file.&lt;/li&gt;
  &lt;li&gt;Any number of client sensors can transmit to any number of data servers as long as the client sensors know the IP address of the servers.&lt;/li&gt;
  &lt;li&gt;Data servers are agnostic to the identity of the client sensors. Each client sensor embeds its identity into the data sent to the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;interface&quot;&gt;Interface&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Point your browser to the webpage &lt;a href=&quot;http://cudmore.duckdns.org:5000&quot;&gt;http://cudmore.duckdns.org:5000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hardware&quot;&gt;Hardware&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sensors clients can run on either a Raspberry Pi or an Arduino.&lt;/li&gt;
  &lt;li&gt;Sensors clients can include: temperature, motion detection, light levels, or a camera.&lt;/li&gt;
  &lt;li&gt;Data servers run on Linux Debian Jessie, OS X, or Raspberry Raspian.&lt;/li&gt;
  &lt;li&gt;Both sensor clients and data servers are running Python. If sensor client is on Arduino, it runs Arduino code.&lt;/li&gt;
  &lt;li&gt;Date servers run &lt;a href=&quot;http://flask.pocoo.org&quot;&gt;Flask&lt;/a&gt; to serve the webpage and use &lt;a href=&quot;https://flask-socketio.readthedocs.org/en/latest/&quot;&gt;socket-io&lt;/a&gt; for realtime updates of pages served.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mix-n-match&quot;&gt;Mix-n-match&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A client sensor can also be running a data server. For example, a Raspberry Pi with a motion sensor client can also have a data server to receive motion events to trigger an image capture.&lt;/li&gt;
  &lt;li&gt;Alternatively, a sensor client could have two sensors: a motion detector and a camera. In this case, motion would trigger an image capture and then transmit this as two events to a data server (a motion detection timestamp and an image).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###’Real world’ input
 - Data servers can receive input from people. For example, a button to request a sensor client to read the current temperature or to take an image. In this senario, the sensor client also needs a data server to receive the button commands.&lt;/p&gt;

&lt;h3 id=&quot;api&quot;&gt;API&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/bokeh
   plot with bokeh (python generates javascript and plots off my server)
/images/a
   plot with matplotlib (generates a static image)
/plotly
   plot with plotly javascript (pure javascript pulling data off my server)
/keen
   plot with keen (pure javascript, pulling data from keen server)
/system
   the type of system the server is running on 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>simple form in jekyll</title>
   <link href="http://blog.cudmore.io/post/2015/09/04/simple-form/"/>
   <updated>2015-09-04T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/09/04/simple-form</id>
   <content type="html">&lt;head&gt;
  &lt;style&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;&gt;
&lt;/style&gt;
&lt;/head&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
### Software request form&lt;/p&gt;

&lt;form action=&quot;//formspree.io/robert.cudmore@gmail.com&quot; method=&quot;POST&quot;&gt;
    
    &lt;table style=&quot;width:500px&quot;&gt;
    &lt;tr&gt;
    &lt;td&gt;
    Name:
    &lt;/td&gt;
    &lt;td&gt;
    &lt;input type=&quot;text&quot; name=&quot;name&quot; size=&quot;50&quot; /&gt;&lt;br /&gt;
	&lt;/td&gt;
	&lt;/tr&gt;

    &lt;tr&gt;
    &lt;td&gt;
    Institution:
    &lt;/td&gt;
    &lt;td&gt;
    &lt;input type=&quot;text&quot; name=&quot;Institution&quot; size=&quot;50&quot; /&gt;&lt;br /&gt;
	&lt;/td&gt;
	&lt;/tr&gt;
	
    &lt;tr&gt;
    &lt;td&gt;
    Lab:
    &lt;/td&gt;
    &lt;td&gt;
    &lt;input type=&quot;text&quot; name=&quot;Lab&quot; placeholder=&quot;&quot; size=&quot;50&quot; /&gt;&lt;br /&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
    &lt;td&gt;
    email:
    &lt;/td&gt;
    &lt;td&gt;
    &lt;input type=&quot;email&quot; name=&quot;_replyto&quot; placeholder=&quot;&quot; size=&quot;50&quot; /&gt;&lt;br /&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
    
    &lt;tr&gt;
    &lt;td&gt;
    retype email:
    &lt;/td&gt;
    &lt;td&gt;
    &lt;input type=&quot;email&quot; name=&quot;_replyto2&quot; placeholder=&quot;&quot; size=&quot;50&quot; /&gt;&lt;br /&gt;
    &lt;/td&gt;
    &lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
Message
&lt;/td&gt;
&lt;td&gt;
    &lt;textarea name=&quot;message&quot; rows=&quot;5&quot; cols=&quot;48&quot; placeholder=&quot;&quot;&gt;&lt;/textarea&gt;
&lt;/td&gt;
&lt;/tr&gt;

	&lt;/table&gt;

	&lt;input type=&quot;hidden&quot; name=&quot;whereicamefrom&quot; value=&quot;MapManager&quot; /&gt;

    &lt;input type=&quot;hidden&quot; name=&quot;_next&quot; value=&quot;/thanks/&quot; /&gt;

	&lt;input type=&quot;text&quot; name=&quot;_gotcha&quot; style=&quot;display:none&quot; /&gt;

 &lt;tr&gt;
 &lt;td&gt;
	&lt;input type=&quot;submit&quot; class=&quot;btn btn-primary btn-md&quot; value=&quot;Submit&quot; /&gt;

 &lt;/td&gt;
 &lt;/tr&gt;
&lt;/form&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>pyqtGraph to display a .tif stack</title>
   <link href="http://blog.cudmore.io/post/2015/08/14/PyQtGraph-to-display-a-stack/"/>
   <updated>2015-08-14T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/08/14/PyQtGraph-to-display-a-stack</id>
   <content type="html">&lt;p&gt;This will display a 3D .tif stack where slices can be viewed and contrast set.&lt;/p&gt;

&lt;h4 id=&quot;install-libraries&quot;&gt;Install libraries&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install pyqtgraph
pip install tifffile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;python-code&quot;&gt;Python code&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import pyqtgraph as pg
import tifffile
tif = tifffile.TiffFile(&#39;Desktop/zyF4107_d1_s0_ch1.tif&#39;)
images = tif.asarray()
pg.image(images)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;to-do&quot;&gt;To Do&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Not sure how this works for 2 channels.&lt;/li&gt;
  &lt;li&gt;See how easy it is to plugin custom python code into PyQtGraph.
    &lt;ol&gt;
      &lt;li&gt;Remove the right contrast slider and bottom slice slider.&lt;/li&gt;
      &lt;li&gt;Swap mouse wheel from zooming image to scrolling slices.&lt;/li&gt;
      &lt;li&gt;Overlay 3D annotations that are masked. Appear and disappear as a function of slices.&lt;/li&gt;
      &lt;li&gt;Select a 3D annotation.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;links&quot;&gt;Links&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pyqtgraph.org&quot;&gt;PyQtGraph&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;TiffFile is provided by &lt;a href=&quot;http://www.lfd.uci.edu/%7Egohlke/&quot;&gt;Christoph Gohlke&lt;/a&gt; and is &lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/code/tifffile.py.html&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;IMG SRC=”/images/example-pyqtgraph.png” width=800&amp;gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Behavioral data acquisition with Raspberry, Arduino, Video and ScanImage</title>
   <link href="http://blog.cudmore.io/post/2015/06/08/Behavioral-acquisition-with-raspberry-arduino-video-and-scan-image/"/>
   <updated>2015-06-08T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/06/08/Behavioral-acquisition-with-raspberry-arduino-video-and-scan-image</id>
   <content type="html">&lt;p&gt;Have a Raspberry Pi be the master control for a trial based experiment. Each trial is started by the Pi, the Pi triggers an Arduino and ScanImage (via TTL) and then saves Arduino based timestamped events to a file while recording real-time timestamped video.&lt;/p&gt;

&lt;p&gt;See github code and full documentation at &lt;a href=&quot;https://github.com/cudmore/triggerserver&quot;&gt;https://github.com/cudmore/triggerserver&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Changing default mount name in Apple File Sharing</title>
   <link href="http://blog.cudmore.io/post/2015/06/07/Changing-default-mount-in-Apple-File-Sharing/"/>
   <updated>2015-06-07T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/06/07/Changing-default-mount-in-Apple-File-Sharing</id>
   <content type="html">&lt;p&gt;I mount multiple Raspberry Pi’s via Apple File Protocol (AFP). They each get mounted on my Mac as a hard-drive on the desktop but each one defaults to the same name ‘Home Directory’. There is no way to tell them apart once mounted (except for looking at what is in them).&lt;/p&gt;

&lt;p&gt;Here is how you change the name of the default AFP mount point.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# stop netatalk
sudo /etc/init.d/netatalk stop

# edit config file
sudo nano /etc/netatalk/AppleVolumes.default

# change this one line

# By default all users have access to their home directories.
#~/                     &quot;Home Directory&quot;
~/                      &quot;pi50&quot;

# restart netatalk
sudo /etc/init.d/netatalk start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This pi will now mount on my Mac desktop as a hard-drive named ‘pi50’&lt;/p&gt;

&lt;h4 id=&quot;links&quot;&gt;Links&lt;/h4&gt;

&lt;p&gt;I got this &lt;a href=&quot;https://www.raspberrypi.org/forums/viewtopic.php?f=36&amp;amp;t=26826&quot;&gt;from here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Arduino + stepper motor + rotary encoder + scan image frame clock + serial logging</title>
   <link href="http://blog.cudmore.io/post/2015/05/24/Non-blocking-stepper-motor-on-arduino/"/>
   <updated>2015-05-24T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/05/24/Non-blocking-stepper-motor-on-arduino</id>
   <content type="html">&lt;p&gt;Goal here is to make an Arduino do four things simultaneously:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read a rotary encoder&lt;/li&gt;
  &lt;li&gt;Drive a stepper motor&lt;/li&gt;
  &lt;li&gt;Respond to Scan Image (SI) frame clock&lt;/li&gt;
  &lt;li&gt;Log all events to serial&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The rotary encoder and stepper motor (1,2) need to be non-blocking. All inputs (1,2,3) need to use low-level interrupts to be ‘timing precise’ and not get blocked themselves.&lt;/p&gt;

&lt;p&gt;Initially I wanted to log all this to Arduino memory but there is not enough on the Arduino Uno. Upgrading to Arduino Mega gives you 4x memory but still not enough. The rotary encoder fires off tons of events and if I hard code events as an array (in Arduino memory), I am limited to about 250 events. Same problem with SI frames, I am limited to about 250 frame timestamps. Arduino ProgMem does not work as it is not writable at runtime. In the future I may get an SD card shield for this?&lt;/p&gt;

&lt;p&gt;For now I am having Arduino log all events to serial and am using python code (on a Raspberry Pi) to grab and save all serial events coming from Arduino. This seems to work well. The critical piece is that the serial logger on the Pi is stateless, you just ‘set it and forget it’ and it logs all events all day.&lt;/p&gt;

&lt;h3 id=&quot;install-arduino-16x&quot;&gt;Install Arduino 1.6.x&lt;/h3&gt;

&lt;p&gt;Don’t upgrade the system to Debian Jesse, just pull the Arduino 1.6 packages from Debian Jesse repository.&lt;/p&gt;

&lt;p&gt;https://nicohood.wordpress.com/2015/01/24/installing-avr-gcc-4-8-1-and-arduino-ide-1-6-on-raspberry-pi/&lt;/p&gt;

&lt;p&gt;His site is moving to &lt;a href=&quot;https://github.com/NicoHood/Arduino-IDE-for-Raspberry&quot;&gt;github.com/NicoHood&lt;/a&gt;. Another person who bailed on Wordpress, hard times for wordpress?&lt;/p&gt;

&lt;h3 id=&quot;motor-controller&quot;&gt;Motor controller&lt;/h3&gt;

&lt;p&gt;I am using &lt;a href=&quot;http://www.schmalzhaus.com/EasyDriver/&quot;&gt;EasyDriver&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;non-blocking-stepper-motor-on-arduino&quot;&gt;Non blocking stepper motor on arduino&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.airspayce.com/mikem/arduino/AccelStepper/index.html&quot;&gt;AccelStepper&lt;/a&gt; Arduino library.&lt;/p&gt;

&lt;h3 id=&quot;rotary-encoder&quot;&gt;Rotary encoder&lt;/h3&gt;
&lt;p&gt;I have a ‘Honeywell 600-128-cbl’. Looking at wires as they come out of encoder…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;green - Ground&lt;/li&gt;
  &lt;li&gt;yellow -  ‘A’ out –» arduino 0&lt;/li&gt;
  &lt;li&gt;orange - ‘B’ out –» arduino 1&lt;/li&gt;
  &lt;li&gt;red - 5 Vdc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pinouts are in &lt;a href=&quot;http://www.farnell.com/datasheets/1712854.pdf&quot;&gt;.pdf on farnell website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mount with nut and lockwasher
- Hex Mount Nut: 3/8 in x 32
- Internal Tooth Lockwasher&lt;/p&gt;

&lt;h3 id=&quot;rotary-encoder-library&quot;&gt;Rotary encoder library&lt;/h3&gt;

&lt;p&gt;A non-blocking rotary encoder library for Arduino is made by &lt;a href=&quot;http://www.pjrc.com/teensy/td_libs_Encoder.html&quot;&gt;pjrc&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;setting-arbitrary-interrupts-on-arduino&quot;&gt;Setting arbitrary interrupts on Arduino&lt;/h3&gt;

&lt;p&gt;By default the Arduino Uno has low level interrupts on input pins 2 and 3. I need more interrupts. You can upgrade your Arduino board or just set low level interrupts on any input pin. I am setting A0/A1/A2 to accept &lt;a href=&quot;http://www.geertlangereis.nl/Electronics/Pin_Change_Interrupts/PinChange_en.html&quot;&gt;low level interrupts&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;plotting-sensor-data-from-arduino&quot;&gt;Plotting sensor data from arduino&lt;/h3&gt;

&lt;p&gt;This is tricky as parsing incoming serial data is slow. It is slow on any operating system and with any CPU chip including Pentium i7 running OSX or Window, Arm processor on Raspberry Pi. The serial parsing/reading eventually finishes but to get a legitimate real-time plot requires buffering a number of values and plotting them in a batch. This is particularly important for the high bandwidth of the rotary encoder.&lt;/p&gt;

&lt;p&gt;I tried three different options and dedicating myself to pyqtgraph…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://matplotlib.org&quot;&gt;Matplotlib&lt;/a&gt;. Too slow and plots are inherently non interactive (like Matlab).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://processing.org&quot;&gt;Processing&lt;/a&gt;. Very simple to implement, good for prototyping, very powerful Java based code. In the end I want to use Python so I am ditching it for final production.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pyqtgraph.org&quot;&gt;PyQtGraph&lt;/a&gt;. Python based and designed to plot within an application. HIghly interactive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;good-code-for-python-matplotlib&quot;&gt;Good code for python matplotlib&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.lebsanft.org/?p=48
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;processing-on-the-pi&quot;&gt;Processing on the pi&lt;/h4&gt;

&lt;p&gt;Installing Processing on the PI is a little tricky.&lt;/p&gt;

&lt;p&gt;http://cagewebdev.com/index.php/raspberry-pi-running-processing-on-your-raspi/&lt;/p&gt;

&lt;h4 id=&quot;pyqtgraph&quot;&gt;pyqtgraph&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo pip install pyqtgraph
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;gotchas&quot;&gt;Gotchas&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t connect pin 0 on Arduino, you will get arduino error
 avrdude stk500_getsync(): not in sync&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;put-arduino-libraries-in&quot;&gt;Put Arduino libraries in&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/share/arduino/libraries/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;AccellStepper Arduino library&lt;br /&gt;
http://www.airspayce.com/mikem/arduino/AccelStepper/index.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Non blocking rotary encoder library for Arduino&lt;br /&gt;
http://www.pjrc.com/teensy/td_libs_Encoder.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setting any pin as a low level interrupt on Arduino&lt;br /&gt;
http://www.geertlangereis.nl/Electronics/Pin_Change_Interrupts/PinChange_en.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;easy driver motor controller&lt;br /&gt;
http://www.schmalzhaus.com/EasyDriver/
http://www.schmalzhaus.com/EasyDriver/Examples/EasyDriverExamples.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pinouts for ‘Honeywell 600-128-cbl’ rotary encoder&lt;br /&gt;
http://www.farnell.com/datasheets/1712854.pdf&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;EasyDriver Tutorials&lt;br /&gt;
http://bildr.org/2012/11/big-easy-driver-arduino/
http://bildr.org/2012/11/big-easy-driver-arduino/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[not useful] A small fork of AccelStepper v1.3 with AF_motor (Adafruit motor shield) support&lt;br /&gt;
https://github.com/adafruit/AccelStepper&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://matplotlib.org&quot;&gt;Matplotlib&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://processing.org&quot;&gt;Processing&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.pyqtgraph.org&quot;&gt;PyQtGraph&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Mounting a USB drive at boot</title>
   <link href="http://blog.cudmore.io/post/2015/05/05/mounting-a-usb-drive-at-boot/"/>
   <updated>2015-05-05T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/05/05/mounting-a-usb-drive-at-boot</id>
   <content type="html">&lt;p&gt;I have a Fat32 formatted USB drive and I want to have it mounted when the Raspberry Pi boots. To do this I add an entry to my fstab file using the UUID of the drive and some permission.&lt;/p&gt;

&lt;h4 id=&quot;get-a-list-of-your-usb-devices-to-check-if-your-usb-drive-is-available&quot;&gt;Get a list of your USB devices to check if your USB drive is available&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsusb

Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp.
Bus 001 Device 004: ID 13fe:5200 Kingston Technology Company Inc.
Bus 001 Device 005: ID 0bda:8176 Realtek Semiconductor Corp. RTL8188CUS 802.11n WLAN Adapter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;make-a-directory-to-mount-your-drivevolume-into&quot;&gt;Make a directory to mount your drive/volume into&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mkdir /home/pi/crap
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;find-the-uuid-of-your-drive&quot;&gt;Find the UUID of your drive&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo blkid

/dev/mmcblk0p1: SEC_TYPE=&quot;msdos&quot; LABEL=&quot;boot&quot; UUID=&quot;2654-BFC0&quot; TYPE=&quot;vfat&quot;
/dev/mmcblk0p2: UUID=&quot;548da502-ebde-45c0-9ab2-de5e2431ee0b&quot; TYPE=&quot;ext4&quot;
/dev/sda1: LABEL=&quot;CRAP&quot; UUID=&quot;7CCD-19F2&quot; TYPE=&quot;vfat&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This tells me that my usb drive is in the device list at /dev/sda1, has the label ‘crap’, a UUID of ’7CCD-19F2′, and is formatted as VFAT (e.g. FAT32).&lt;/p&gt;

&lt;h4 id=&quot;edit-your-etcfstab-file-by-appending-a-line-for-your-dive&quot;&gt;Edit your /etc/fstab file by appending a line for your dive&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo pico /etc/fstab

proc            /proc           proc    defaults          0       0
/dev/mmcblk0p1  /boot           vfat    defaults          0       2
/dev/mmcblk0p2  /               ext4    defaults,noatime  0       1
UUID=7CCD-19F2 /home/pi/crap    vfat    rw,umask=0      0       0
# a swapfile is not a swap partition, so no using swapon|off from here on, use $
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here, on the line starting with UUID, I have mounted a device using its UUID=7CCD-19F2 into a folder /home/pi/crap. This is a Fat32 formatted drive (vfat) and everybody has read-write permissions (rw,umask=0). This recipe will not work for other types of formatted drives (Ext3, NTFS, etc).&lt;/p&gt;

&lt;h4 id=&quot;remount-your-drives-and-check-the-drive-is-mounted&quot;&gt;Remount Your drives and check the drive is mounted&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mount -a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;‘ls’ should show /video/ in blue to indicate it is mounted&lt;/p&gt;

&lt;p&gt;Important. When you make the directory where a drive will be mounted it MUST be done with ‘sudo mkdir /home/pi/crap’. You need ‘sudo’ so fstab can mount it on boot, the final permissions of this mounted drive are set in the drives fstab line. In this case, ‘rw,umask=0′.&lt;/p&gt;

&lt;h4 id=&quot;linux-commands&quot;&gt;Linux Commands&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;List your usb devices: lsusb&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;List the Location, Label, UUID and Type of your USB devices: sudo blkid&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unmount a volume: sudo umount /home/pi/crap&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mount everybody in fstab: sudo mount -a&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Check if a drive is mounted: df&lt;/td&gt;
          &lt;td&gt;grep “/home/pi/video”&lt;/td&gt;
          &lt;td&gt;awk ‘{print $6}’&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;to-do&quot;&gt;To Do&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A problem I just had is that my USB drive did not get mounted at boot and the folder I have reserved for it is on my root file system, ‘/’,  with only 4 GB of space. I started writing tons of video files to the folder and quickly ran out of space on. Now, I need a way to test if the folder I am writing to is (I) a folder or (ii) an actual mount point. Tym, the bash guru in the lab and my go to person on these things suggested the following:&lt;/p&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;df&lt;/td&gt;
          &lt;td&gt;grep “/home/pi/video”&lt;/td&gt;
          &lt;td&gt;awk ‘{print $6}’&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will return an empty string if /home/pi/video is NOT mounted.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>X11 on raspberry</title>
   <link href="http://blog.cudmore.io/post/2015/05/05/X11-on-Raspberry/"/>
   <updated>2015-05-05T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/05/05/X11 on Raspberry</id>
   <content type="html">&lt;p&gt;This is how I set up X11 on Raspberry server to serve individual windows to a Mac OSX client.&lt;/p&gt;

&lt;p&gt;Any program you run on the Pi server that has a GUI should be piped to the display of your mac client.&lt;/p&gt;

&lt;h4 id=&quot;install-xquartz-on-osx&quot;&gt;Install XQuartz on OSX&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Install stalls at about 80%, be patient&lt;/li&gt;
  &lt;li&gt;Requires logout and login&lt;/li&gt;
  &lt;li&gt;Download &lt;a href=&quot;http://xquartz.macosforge.org/landing/&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ssh-to-raspberry-using--x&quot;&gt;ssh to Raspberry using ‘-X’&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -X pi@10.16.79.145
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;on-raspberry-server&quot;&gt;On Raspberry server&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This allows ‘sudo python’ to work with things like Tk()&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo cp ~/.Xauthority ~root/
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This tells X11 on the Pi server to send its windows to your mac client (when you remote ssh with -X)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; export DISPLAY=&quot;127.0.0.1:10.0&quot;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;check-that-xeyes-works&quot;&gt;Check that xeyes works&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;install&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo apt-get install x11-apps
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;run&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; xeyes&amp;amp;
 xclock&amp;amp;
 leafpad&amp;amp;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;if-this-doesnt-work&quot;&gt;If this doesn’t work&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;open up X11 to everybody&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  xhost +
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;run-arduino-ide&quot;&gt;Run Arduino ide&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/bin/arduino&amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Auto login to ssh servers</title>
   <link href="http://blog.cudmore.io/post/2015/05/04/Auto-login-to-ssh-server/"/>
   <updated>2015-05-04T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/05/04/Auto-login-to-ssh-server</id>
   <content type="html">&lt;p&gt;In order to automatically login to an ssh server, you need to generate public/private rsa key pairs on a client and copy these keys to an ssh server. Next time you login from the client to the server, you won’t need to enter your password.&lt;/p&gt;

&lt;p&gt;You should learn and understand a bit about ssh and its security implementations, mostly rsa. Your privacy is only as good as your ability to keep your keys secret, here is a recent example of a nifty ‘side channel attack‘ to obtain your secret keys.&lt;/p&gt;

&lt;p&gt;In what follows I am setting up automatic rsa authentication from a client to a server:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;client: OS X or Linux, cudmore$&lt;/li&gt;
  &lt;li&gt;server: Raspian, pi@192.168.1.70&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;client-generate-publicprivate-rsa-key-pair&quot;&gt;[Client] Generate public/private rsa key pair&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen -t rsa

Generating public/private rsa key pair.
Enter file in which to save the key (/Users/cudmore/.ssh/id_rsa): 
/Users/cudmore/.ssh/id_rsa already exists.
Overwrite (y/n)? y
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /Users/cudmore/.ssh/id_rsa.
Your public key has been saved in /Users/cudmore/.ssh/id_rsa.pub.
The key fingerprint is:
a3:73:53:ee:68:54:37:e9:aa:64:68:4d:30:c3:4f:3a cudmore@localhost
The key&#39;s randomart image is:
+--[ RSA 2048]----+
|                 |
|     .           |
|      = .    .   |
|       B  . +    |
|      E S..o .   |
|       *.+  .    |
|      =.* ..     |
|     . =.+.      |
|       .o..      |
+-----------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;client-idrsapub-from-the-client-to-the-ssh-server-need-to-enter-password&quot;&gt;[Client] id_rsa.pub from the client to the ssh server (need to enter password)&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp ./.ssh/id_rsa.pub pi@192.168.1.70:~/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;client-login-to-the-ssh-server-last-time-you-will-need-a-password&quot;&gt;[Client] Login to the ssh server (last time you will need a password)&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh pi@192.168.1.70
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;server-copy-the-key-into-the-correct-location-on-the-server&quot;&gt;[Server] Copy the key into the correct location (on the server)&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat id_rsa.pub &amp;gt;&amp;gt; ./.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;server-delete-the-original-on-the-server&quot;&gt;[Server] Delete the original (on the server)&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm ./id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;client-the-next-time-you-login-you-will-not-be-asked-for-a-password&quot;&gt;[Client] The next time you login you will not be asked for a password&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh pi@192.168.1.70
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;notes&quot;&gt;Notes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;If your Raspberry does not have a ./.ssh directory you need to turn on ssh using ‘sudo raspi-config’ -&amp;gt; advanced options -&amp;gt; ssh&lt;/li&gt;
  &lt;li&gt;When you append to authorized_keys with ‘cat id_rsa.pub » ./.ssh/authorized_keys’, the file will be created if it does not exist.&lt;/li&gt;
  &lt;li&gt;If your client is Mac OS X you will be asked for a passphrase when you generate your ssh public/private keys with ‘ssh-keygen -t rsa’. This is an extra level of security. The first time you login to your ssh server, OS X will ask for this passphrase. Again, your security is only as good as you keeping your passwords safe. Using a passphrase for your OSX keychain is convenient but if someone gets this passphrase, they in turn get all your passwords within your keychain. This may seem very circular and it is, the art is in being creative in breaking the loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;fun&quot;&gt;Fun&lt;/h4&gt;

&lt;p&gt;-ssh -o VisualHostKey=yes pi@192.168.1.70&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Python tricks</title>
   <link href="http://blog.cudmore.io/post/2015/04/30/python-tricks/"/>
   <updated>2015-04-30T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/04/30/python-tricks</id>
   <content type="html">&lt;h4 id=&quot;ipython-auto-reload-imports&quot;&gt;iPython auto reload imports&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%load_ext autoreload
%autoreload 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To autoload these options, see:&lt;/p&gt;

&lt;p&gt;http://stackoverflow.com/questions/1907993/autoreload-of-modules-in-ipython/10472712# 10472712&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ipython profile create

c.InteractiveShellApp.exec_lines = []
c.InteractiveShellApp.exec_lines.append(&#39;%load_ext autoreload&#39;)
c.InteractiveShellApp.exec_lines.append(&#39;%autoreload 2&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>VNC on raspberry pi</title>
   <link href="http://blog.cudmore.io/post/2015/04/29/vnc-on-raspberry/"/>
   <updated>2015-04-29T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/04/29/vnc-on-raspberry</id>
   <content type="html">&lt;h3 id=&quot;remote-login-to-raspberry-with-tightvnc&quot;&gt;Remote login to Raspberry with tightvnc&lt;/h3&gt;

&lt;p&gt;See&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.raspberrypi.org/documentation/remote-access/vnc/
http://elinux.org/RPi_VNC_Server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;install-tightvncserver-server-on-raspberry&quot;&gt;Install tightvncserver server on Raspberry&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install tightvncserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;run-tightvncserver-to-set-password&quot;&gt;Run tightvncserver to set password&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tightvncserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;start-server-on-pi&quot;&gt;Start server on pi&lt;/h3&gt;

&lt;p&gt;Use :1 if your Pi is running X11 by default (mine is)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vncserver :1 -geometry 1920x1080 -depth 24
vncserver :1 -geometry 1280x800 -depth 24
vncserver :1 -geometry 1024x768 -depth 24
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;kill-server&quot;&gt;kill server&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vncserver -kill :1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;install-realvnc-client-on-osx&quot;&gt;Install realVNC client on OSX&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.realvnc.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;enable-copypaste-between-host-and-server&quot;&gt;Enable copy/paste between host and server&lt;/h3&gt;

&lt;p&gt;See&lt;/p&gt;

&lt;p&gt;http://raspberrypi.stackexchange.com/questions/4474/tightvnc-copy-paste-between-local-os-and-raspberry-pi&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# install
sudo apt-get install autocutsel

# edit /home/pi/.vnc/xstartup
pico .vnc/xstartup 

# make it look like this
#!/bin/sh

xrdb $HOME/.Xresources
xsetroot -solid grey
# added 20150414 to get copy paste to work
autocutsel -fork
# x-terminal-emulator -geometry 80x24+10+10 -ls -title &quot;$VNCDESKTOP Desktop&quot; &amp;amp;
# x-window-manager &amp;amp;
# Fix to make GNOME work
export XKL_XMODMAP_DISABLE=1
/etc/X11/Xsession
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;alternative-is-to-use-x11vnc&quot;&gt;Alternative is to use x11vnc&lt;/h3&gt;

&lt;p&gt;See&lt;/p&gt;

&lt;p&gt;https://www.raspberrypi.org/forums/viewtopic.php?p=108862&lt;/p&gt;

&lt;p&gt;https://www.raspberrypi.org/forums/viewtopic.php?f=91&amp;amp;t=19600&lt;/p&gt;

&lt;h4 id=&quot;pros&quot;&gt;Pros&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;This will ‘recycle’ your :0 display if you are booting with X11&lt;/li&gt;
  &lt;li&gt;You will be able to see the same screen on direct HDMI/Video output and your remote connection simultaneously&lt;/li&gt;
  &lt;li&gt;You will remote login (with realVNC) and get the same desktop&lt;/li&gt;
  &lt;li&gt;Copy/Paste works by default&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cons&quot;&gt;Cons&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;This would work if you always had a HDMI display at a desired resolution (or tweaked /boot/config.txt to force HDMI).&lt;/li&gt;
  &lt;li&gt;Does not work well if you are throwing your display out an analog RCA jack, it is too low res and then your VNC connection just follows that low resolution. Maybe could fix this?&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Install OSX</title>
   <link href="http://blog.cudmore.io/post/2015/04/19/Install-OSX/"/>
   <updated>2015-04-19T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/04/19/Install-OSX</id>
   <content type="html">&lt;p&gt;Upgraded home desktop with fresh install of OSX 10.9.5 Mavericks.&lt;br /&gt;
 - Motherboard is &lt;a href=&quot;http://www.gigabyte.com/products/product-page.aspx?pid=4279# ov&quot;&gt;GA-Z77X-UP5-TH&lt;/a&gt;&lt;br /&gt;
 - BIOS is &lt;a href=&quot;http://www.gigabyte.com/products/product-page.aspx?pid=4279# bios&quot;&gt;F12&lt;/a&gt;&lt;br /&gt;
 - Followed Tonymac post by &lt;a href=&quot;http://www.tonymacx86.com/golden-builds/73112-updated-storks-thunderbolt-build-i5-3570k-ga-z77x-up5-th-gtx-650-ti-mavericks.html&quot;&gt;Stork&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;analysis&quot;&gt;Analysis&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.wavemetrics.com/support/versions.htm&quot;&gt;Igor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fiji.sc/Downloads&quot;&gt;Fiji&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Using ‘Fiji Life-Line version, 2014 November 25’.&lt;/li&gt;
      &lt;li&gt;Fiji will not run until setting: Security &amp;amp; Privacy -&amp;gt; Allow apps downloaded from: Anywhere&lt;/li&gt;
      &lt;li&gt;Installing Java SE 6&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;development&quot;&gt;Development&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.macports.org/install.php&quot;&gt;Macports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;XCode command line tools &lt;br /&gt;
 ~~~
 xcode-select –install
 ~~~&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://continuum.io/downloads&quot;&gt;Anaconda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/docs/installation/&quot;&gt;Jekyll&lt;/a&gt; &lt;br /&gt;
 ~~~
 gem install jekyll
 ~~~&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;synchronization&quot;&gt;Synchronization&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mac.github.com&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cis.upenn.edu/~bcpierce/unison/&quot;&gt;Unison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;utility&quot;&gt;Utility&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.barebones.com/products/textwrangler/download.html&quot;&gt;TextWrangler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bjango.com/mac/istatmenus/&quot;&gt;iStat Menus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://unarchiver.c3.cx/unarchiver&quot;&gt;Unarchiver&lt;/a&gt; - Handles .xz, .exe&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;word-processing-and-layout&quot;&gt;Word processing and layout&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;iWork&lt;/li&gt;
  &lt;li&gt;Adobe Illustrator CS6&lt;/li&gt;
  &lt;li&gt;Adobe reader (for digital signatures)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;web&quot;&gt;Web&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Stock install of Safari&lt;/li&gt;
  &lt;li&gt;Chrome&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;media&quot;&gt;Media&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.videolan.org&quot;&gt;VLC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;torrent&quot;&gt;Torrent&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.utorrent.com/downloads/mac&quot;&gt;mu-torrent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;remote-desktop-connection-to-raspberry-pi&quot;&gt;Remote desktop connection to Raspberry Pi&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.realvnc.com/download/viewer/&quot;&gt;realVNC viewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;myjhu-vpn-this-is-the-part-that-is-always-fucking-impossible&quot;&gt;myjhu VPN (This is the part that is always FUCKING IMPOSSIBLE)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;[FUCK IT, IT IS NOT MY JOB TO DOCUMENT SOFTWARE THAT DOES NOT WORK AND IS MANAGED BY INCOMPETENT AND OVERPAID TWITS]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del&gt;- Start by going &lt;a href=&quot;https://jhpulse.johnshopkins.edu.&quot;&gt;here&lt;/a&gt;&lt;/del&gt;&lt;br /&gt;
 &lt;del&gt;- https://jhpulse.johnshopkins.edu.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;- Forces install of Java 8u45&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;- https://www.java.com/en/download/mac_download.jsp&lt;/del&gt;&lt;br /&gt;
&lt;del&gt;- jre-8u45-macosx-x64.dmg&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;- Install Junos Pulse (twice)&lt;/del&gt;&lt;br /&gt;
 &lt;del&gt;- Requires manual setting of Safari security&lt;/del&gt;&lt;br /&gt;
 - Complete bullshit amateur hack job&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.cudmore.io/images/i-can-see-you-black-flag.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab Protocols</title>
   <link href="http://blog.cudmore.io/post/2015/03/27/lab-protocols/"/>
   <updated>2015-03-27T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/03/27/lab-protocols</id>
   <content type="html">&lt;h4 id=&quot;dental-cement-cb-metabond-adhesive-cement-parkell-inc&quot;&gt;Dental cement, C&amp;amp;B-Metabond Adhesive Cement, Parkell Inc&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;S396 (3g) Radiopaque Tooth-Shade L-Powder&lt;/li&gt;
  &lt;li&gt;S398 (10ml) C&amp;amp;B-Metabond Quick Base (blue)&lt;/li&gt;
  &lt;li&gt;S371 (0.7ml) Catalyst Gold Label&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4 drops Quick Base + 1 drop Catalyst + 2 scoops Powder&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fresh install of Raspian</title>
   <link href="http://blog.cudmore.io/post/2015/03/21/fresh-install-raspian/"/>
   <updated>2015-03-21T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/03/21/fresh-install-raspian</id>
   <content type="html">&lt;p&gt;This is the procedure I follow to install a fresh raspbian system on a Raspberry Pi.&lt;/p&gt;

&lt;h3 id=&quot;preliminaries&quot;&gt;Preliminaries&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo raspi-config # configure pi with text menu

sudo apt-get update # update database

sudo apt-get upgrade # update userspace

sudo rpi-update # update firmware (requires reboot)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;apple-file-protocol-afp&quot;&gt;Apple-File-Protocol (afp)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install netatalk
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;unison-file-synchronization&quot;&gt;Unison file synchronization&lt;/h3&gt;

&lt;p&gt;See my post &lt;a href=&quot;http://www.robertcudmore.org/blog/?p=168&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install unison
# see link to set up auto authentication with rsa keys
unison # run once to make /home/pi/.unison
pico /home/pi/.unison/sites.prf    

# This is contents of /home/pi/.unison/sites.prf
# Unison preferences file
root = /home/pi/Sites
root = ssh://robertcu@robertcudmore.org/raspberry/Sites

ignore = Name *.tif
ignore = Name .AppleDouble
ignore = Name .DS_Store
ignore = Name *.DS_Store
ignore = Name *.shtml
ignore = Name *.htaccess

# Be fast even on Windows
# fastcheck = yes

servercmd=/home1/robertcu/unison
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;startup-mailer&quot;&gt;Startup mailer&lt;/h3&gt;
&lt;p&gt;See my post &lt;a href=&quot;http://www.robertcudmore.org/blog/?p=60&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use gmail ‘cudmore.raspberry@gmail.com’ to send&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; wget http://cudmore.github.io/downloads/startup_mailer.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;what-is-my-ip&quot;&gt;What is my ip&lt;/h3&gt;

&lt;p&gt;Download whatismyip.py, run it and it will tell you your ip&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; wget http://cudmore.github.io/downloads/whatismyip.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;python&quot;&gt;python&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install python-dev  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;pip&quot;&gt;pip&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install python-pip  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;flask&quot;&gt;Flask&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Flask tutorial &lt;a href=&quot;http://mattrichardson.com/Raspberry-Pi-Flask/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;sudo pip install flask&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;socketio-for-flask&quot;&gt;socketio for Flask&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://flask-socketio.readthedocs.org/en/latest/&quot;&gt;socketio website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://blog.miguelgrinberg.com/post/easy-websockets-with-flask-and-gevent&quot;&gt;socketio tutorial&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;sudo pip install flask-socketio&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pandas-this-takes-awhile&quot;&gt;pandas (this takes awhile)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install python-pandas  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;subversion&quot;&gt;subversion&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install subversion
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mjpg-streamer&quot;&gt;mjpg-streamer&lt;/h3&gt;

&lt;p&gt;See my post &lt;a href=&quot;http://cudmore.github.io/post/2015/03/15/Installing-mjpg-streamer-on-a-raspberry-pi/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get -y install libjpeg8-dev imagemagick libv4l-dev  
sudo ln -s /usr/include/linux/videodev2.h /usr/include/linux/videodev.h  
wget http://sourceforge.net/code-snapshots/svn/m/mj/mjpg-streamer/code/mjpg-streamer-code-182.zip  
unzip mjpg-streamer-code-182.zip  
cd mjpg-streamer-code-182/mjpg-streamer  
make mjpg_streamer input_file.so input_uvc.so output_http.so  
sudo cp mjpg_streamer /usr/local/bin  
sudo cp output_http.so input_file.so input_uvc.so /usr/local/lib/  
sudo cp -R www /usr/local/www  

sudo apt-get install v4l-utils # this is to detect parameters of USB camera  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note, make ‘input_uvc.so’ is for usb cam and ‘input_file’ is for raspberry CSI camera&lt;/p&gt;

&lt;p&gt;If wget does not find mjpg-streamer, download it here&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://cudmore.github.io/downloads/mjpg-streamer-code-182.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;opencv&quot;&gt;opencv&lt;/h3&gt;

&lt;p&gt;See my post on open cv &lt;a href=&quot;http://cudmore.github.io/post/2015/03/07/use-opencv-to-acquire-video/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libopencv-dev python-opencv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;pil&quot;&gt;PIL&lt;/h3&gt;

&lt;p&gt;Not sure if there is apt-get install python-pil ???&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo pip install pil
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;upgrade-numpy-takes-a-long-time&quot;&gt;Upgrade numpy (takes a long time)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;required for pandas and bokeh&lt;/p&gt;

    &lt;p&gt;sudo pip install numpy –upgrade&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;install-pandas&quot;&gt;Install pandas&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install python-pandas  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;install-bokeh&quot;&gt;Install bokeh&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To do, get an example running again&lt;/p&gt;

    &lt;p&gt;sudo pip install bokeh&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;install-python-qt4httpswikipythonorgmoinpyqt&quot;&gt;Install &lt;a href=&quot;https://wiki.python.org/moin/PyQt&quot;&gt;python-qt4&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The list of qt libraries is huge, see &lt;a href=&quot;https://www.raspberrypi.org/forums/viewtopic.php?f=32&amp;amp;t=102028&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install python-qt4
sudo apt-get install python-qt4-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;stop-here-&quot;&gt;!!! Stop Here !!!&lt;/h1&gt;

&lt;h3 id=&quot;client-side-socketio-javascript&quot;&gt;Client side socket.io javascript&lt;/h3&gt;
&lt;p&gt;Client side needs socketio javascript: http://socket.io&lt;br /&gt;
Put this in your Flask project /static/js/&lt;br /&gt;
Something like /home/pi/Sites/iosserver/static/js/socket.io.min.js&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;wget https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.5/socket.io.min.js&lt;br /&gt;
cp socket.io.min.js Sites/iosserver/static/js/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;client-side-jquery&quot;&gt;Client side jquery&lt;/h3&gt;
&lt;p&gt;documentation at: http://jquery.com/download/&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;wget wget http://code.jquery.com/jquery-1.11.2.min.js&lt;br /&gt;
cp jquery-1.11.2.min.js Sites/iosserver/static/js/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;miniconda&quot;&gt;miniconda&lt;/h3&gt;
&lt;p&gt;anaconda install tutorial http://docs.continuum.io/anaconda/install.html&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;wget http://repo.continuum.io/miniconda/Miniconda-3.5.5-Linux-armv6l.sh
bash Miniconda-3.5.5-Linux-armv6l.sh&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;conda update conda
conda update anaconda&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;bokeh&quot;&gt;bokeh&lt;/h3&gt;
&lt;p&gt;bokeh quickstart: http://bokeh.pydata.org/en/latest/docs/quickstart.html
make sure dependencies are installed: NumPy, Pandas, and Redis
&amp;gt; pip install bokeh&lt;/p&gt;

&lt;h3 id=&quot;streaming-from-a-webcam-or-camera-module-using-mjpg-streamer&quot;&gt;Streaming from a webcam or camera module using mjpg streamer&lt;/h3&gt;

&lt;p&gt;My home usb video camera shows up as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@pi50 ~/Sites/iosserver $ lsusb
Bus 001 Device 002: ID 0424:9512 Standard Microsystems Corp. 
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. 
Bus 001 Device 004: ID 1a40:0201 Terminus Technology Inc. FE 2.1 7-port Hub
Bus 001 Device 005: ID 1415:2000 Nam Tai E&amp;amp;E Products Ltd. or OmniVision Technologies, Inc. Sony Playstation Eye
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Source code for mjpg streamer&lt;/p&gt;

&lt;p&gt;http://sourceforge.net/projects/mjpg-streamer/&lt;/p&gt;

&lt;p&gt;Tutorials&lt;/p&gt;

&lt;p&gt;http://jacobsalmela.com/raspberry-pi-webcam-using-mjpg-streamer-over-internet/&lt;/p&gt;

&lt;p&gt;http://blog.miguelgrinberg.com/post/how-to-build-and-run-mjpg-streamer-on-the-raspberry-pi&lt;/p&gt;

&lt;h3 id=&quot;my-usb-webcam-has-following-output&quot;&gt;my usb webcam has following output&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;v4l2-ctl –list-formats
  pi@pi50 ~ $ v4l2-ctl –list-formats
  ioctl: VIDIOC_ENUM_FMT
      Index       : 0
      Type        : Video Capture
      Pixel Format: ‘YUYV’
      Name        : YUYV&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;v4l2-ctl –list-ctrls
  pi@pi50 ~ $ v4l2-ctl –list-ctrls&lt;/p&gt;

    &lt;p&gt;User Controls&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                   brightness (int)    : min=0 max=255 step=1 default=0 value=0 flags=slider
                     contrast (int)    : min=0 max=255 step=1 default=32 value=32 flags=slider
                   saturation (int)    : min=0 max=255 step=1 default=64 value=64 flags=slider
                          hue (int)    : min=-90 max=90 step=1 default=0 value=0 flags=slider
      white_balance_automatic (bool)   : default=1 value=1
                     exposure (int)    : min=0 max=255 step=1 default=120 value=120 flags=inactive, volatile
               gain_automatic (bool)   : default=1 value=1 flags=update
                         gain (int)    : min=0 max=63 step=1 default=20 value=20 flags=inactive, volatile
              horizontal_flip (bool)   : default=0 value=0
                vertical_flip (bool)   : default=0 value=0
         power_line_frequency (menu)   : min=0 max=1 default=0 value=0
                    sharpness (int)    : min=0 max=63 step=1 default=0 value=0 flags=slider
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Camera Controls&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                auto_exposure (menu)   : min=0 max=1 default=0 value=0 flags=update
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-mjpg_streamer –input “input_uvc.so –help”
	pi@pi50 ~ $ mjpg_streamer –input “input_uvc.so –help”
	MJPG Streamer Version: svn rev: Unversioned directory
	 —————————————————————
	 Help for input plugin..: UVC webcam grabber
	 —————————————————————
	 The following parameters can be passed to this plugin:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [-d | --device ].......: video device to open (your camera)
 [-r | --resolution ]...: the resolution of the video device,
						  can be one of the following strings:
						  QSIF QCIF CGA QVGA CIF VGA 
						  SVGA XGA SXGA 
						  or a custom value like the following
						  example: 640x480
 [-f | --fps ]..........: frames per second
 [-y | --yuv ]..........: enable YUYV format and disable MJPEG mode
 [-q | --quality ]......: JPEG compression quality in percent 
						  (activates YUYV format, disables MJPEG)
 [-m | --minimum_size ].: drop frames smaller then this limit, useful
						  if the webcam produces small-sized garbage frames
						  may happen under low light conditions
 [-n | --no_dynctrl ]...: do not initalize dynctrls of Linux-UVC driver
 [-l | --led ]..........: switch the LED &quot;on&quot;, &quot;off&quot;, let it &quot;blink&quot; or leave
						  it up to the driver using the value &quot;auto&quot;
 ---------------------------------------------------------------

input_init() return value signals to exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;this-works-for-usb-webcam&quot;&gt;THIS WORKS FOR USB WEBCAM&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/local/bin/mjpg_streamer -i &quot;/usr/local/lib/input_uvc.so -y&quot; -o &quot;/usr/local/lib/output_http.so -w /usr/local/www&quot;

/usr/local/bin/mjpg_streamer -i &quot;/usr/local/lib/input_uvc.so -y&quot; -o &quot;/usr/local/lib/output_http.so -w /usr/local/www&quot;

/usr/local/bin/mjpg_streamer -i &quot;/usr/local/lib/input_uvc.so -y&quot; -o &quot;/usr/local/lib/output_http.so -w /usr/local/www&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Raspberry Pi video controller</title>
   <link href="http://blog.cudmore.io/post/2015/03/20/Rapsberry-Pi-Video-Controller/"/>
   <updated>2015-03-20T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/03/20/Rapsberry Pi Video Controller</id>
   <content type="html">&lt;p&gt;This is a video server running on a raspberry Pi Linux computer. It provides a web interface to stream and record video.&lt;/p&gt;

&lt;h3 id=&quot;what-it-does&quot;&gt;What it does&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Arm&lt;/strong&gt; - Start video recording when a TTL is received. Hook up the ScanImage frame clock to the Pi and this will start a video recording at the start of each stack or timeseries.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Record&lt;/strong&gt; - Record a one time video.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stream&lt;/strong&gt; - Stream the video to your web browser so you can see a live feed.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stop&lt;/strong&gt; - Stop any video streaming or recording.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IR On/Off&lt;/strong&gt; - Turn one set of LEDs on/off. The brightness of the LED is set with the slider. This is usually hooked up to a bank of IR LEDs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;White On/Off&lt;/strong&gt; - Turn one set of LEDs on/off (usually hooked up to White LEDs)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Message&lt;/strong&gt; - Text entered in the ‘Messages’ field are saved to a text file with timestamps.&lt;/li&gt;
  &lt;li&gt;Provides real-time feedback with elements/objects within the webpage updated without reloading. Some examples are: the time of day, the last ScanImage frame number, current log file, temperature, humidity, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;interface&quot;&gt;Interface&lt;/h3&gt;
&lt;p&gt;&amp;lt;IMG SRC=”/images/example-iosserver.png” width=700 align=CENTER&amp;gt;&lt;/p&gt;

&lt;h3 id=&quot;how-it-works&quot;&gt;How it works&lt;/h3&gt;
&lt;p&gt;The server is pure python running on the Pi. It uses the web framework &lt;a href=&quot;http://flask.pocoo.org&quot;&gt;Flask&lt;/a&gt;. Once the web page is loaded by a client browser(you), any objects within the webpage can be updated in real-time using &lt;a href=&quot;https://flask-socketio.readthedocs.org/en/latest/&quot;&gt;flask-socket-io&lt;/a&gt;. This can be done without refreshing the entire webpage. The layout and interface objects are using &lt;a href=&quot;http://getbootstrap.com&quot;&gt;Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;required-hardware&quot;&gt;Required Hardware&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/products/&quot;&gt;Raspberry Pi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/products/&quot;&gt;Raspberry Pi Camera&lt;/a&gt;, the IR version is called ‘NOIR’.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;[I need to make a GitHub repository with the python source code]&lt;/li&gt;
  &lt;li&gt;[I need to write out how I install this, my original and pretty useless notes are &lt;a href=&quot;http://cudmore.github.io/post/2015/03/15/Installing-mjpg-streamer-on-a-raspberry-pi/&quot;&gt;here&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;running-the-server&quot;&gt;Running the server&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo python iosserver.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will tell you the IP adress you use to login to the server.&lt;/p&gt;

&lt;h3 id=&quot;connecting-to-the-server&quot;&gt;Connecting to the server&lt;/h3&gt;

&lt;p&gt;Just point any browser to the server address.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://192.168.1.60:5000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;extra-details&quot;&gt;Extra Details&lt;/h2&gt;

&lt;h3 id=&quot;the-internet-of-things&quot;&gt;The internet of things&lt;/h3&gt;

&lt;p&gt;Python code running on any other internet-connected device can ‘inject’ values into the iosserver and they will show up in real-time inside all client browsers. Here is example code on another Pi that has its own temperature and humidity sensor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# send to iosserver&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;timestamp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thisTimestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;insideTemp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;insideHum&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;outsideTemp&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outsidetemp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;outsideHum&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outsidehumidity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;http://192.168.1.60:5000/_add_numbers&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;sent to 192.168.1.60 !!!&#39;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;-------- error sending to iosserver ---------&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The iosserver receives this GET request with a little function decorator.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;/_add_numbers&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;timestamp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# defaults to &#39;&#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;insideTemp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;insideTemp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;insideHum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;insideHum&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outsideTemp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;outsideTemp&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outsideHum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;outsideHum&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;timestamp=&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# myVideo is another python class that handles all runtime&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# it is not detailed in this example&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myVideo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insideTemp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insideTemp&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myVideo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insideHum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insideHum&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myVideo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outsideTemp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outsideTemp&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myVideo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outsideHum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outsideHum&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;add_nummbers() received &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insideTemp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insideHum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outsideTemp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outsideHum&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are a few more steps including some javascript and html. This is not a Flask or Socket-IO tutorial. Have a look a &lt;a href=&quot;https://flask-socketio.readthedocs.org/en/latest/&quot;&gt;socket-io for Flask&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>mjpg-streamer on a Raspberry Pi</title>
   <link href="http://blog.cudmore.io/post/2015/03/15/Installing-mjpg-streamer-on-a-raspberry-pi/"/>
   <updated>2015-03-15T18:01:06-04:00</updated>
   <id>http://blog.cudmore.io/post/2015/03/15/Installing-mjpg-streamer-on-a-raspberry-pi</id>
   <content type="html">&lt;p&gt;This post covers downloading, installing and running mjp-streamer on a raspberry pi. There are two options for installation and streaming depending on if you stream from (1) a rapsberry pi camera module or (2) a USB camera.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Sourcecode for mjpg-streamer&lt;br /&gt;
  &lt;a href=&quot;http://sourceforge.net/projects/mjpg-streamer/&quot;&gt;http://sourceforge.net/projects/mjpg-streamer/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tutorials&lt;/p&gt;

    &lt;p&gt;In what follows I am following this blog post …&lt;br /&gt;
  &lt;a href=&quot;http://blog.miguelgrinberg.com/post/how-to-build-and-run-mjpg-streamer-on-the-raspberry-pi&quot;&gt;http://blog.miguelgrinberg.com/post/how-to-build-and-run-mjpg-streamer-on-the-raspberry-pi&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;This post is derived from previous link but explains how to install a USB webcam instead of raspberry pi camera module …&lt;br /&gt;
  &lt;a href=&quot;http://jacobsalmela.com/raspberry-pi-webcam-using-mjpg-streamer-over-internet/&quot;&gt;http://jacobsalmela.com/raspberry-pi-webcam-using-mjpg-streamer-over-internet/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;install-mjpg-streamer&quot;&gt;Install mjpg streamer&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Preliminaries&lt;/p&gt;

    &lt;p&gt;~~~
  sudo apt-get update&lt;br /&gt;
  sudo apt-get upgrade&lt;br /&gt;
  ~~~&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install dependencies&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    sudo apt-get install libjpeg8-dev imagemagick libv4l-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;make symbolic link to changed library names. Thanks to Miguel Grinberg for &lt;a href=&quot;http://blog.miguelgrinberg.com/post/how-to-build-and-run-mjpg-streamer-on-the-raspberry-pi]&quot;&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    ln -s /usr/include/linux/videodev2.h /usr/include/linux/videodev.h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;download mjpg-streamer&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    wget http://sourceforge.net/code-snapshots/svn/m/mj/mjpg-streamer/code/mjpg-streamer-code-182.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;unzip&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    unzip mjpg-streamer-code-182.zip  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;here-is-where-the-installation-differs-depending-on-if-you-are-installing-1-a-usb-camera-or-2-the-raspberry-pi-camera-module&quot;&gt;Here is where the installation differs depending on if you are installing (1) a usb camera or (2) the raspberry pi camera module&lt;/h4&gt;

&lt;h3 id=&quot;raspberry-pi-camera-module&quot;&gt;(1) Raspberry Pi camera module&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;build and install for raspberry pi camera module.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # build with &#39;make&#39;
    cd mjpg-streamer-code-182/mjpg-streamer  
    make mjpg_streamer input_file.so output_http.so  
    # install by copying files
    sudo cp mjpg_streamer /usr/local/bin  
    sudo cp output_http.so input_file.so /usr/local/lib/  
    sudo cp -R www /usr/local/www      
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FOR COMPARISON, HERE IS SAME FOR USB CAMERA. IMPORTANT THING HERE IS &#39;**input_uvc.so**&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # build with &#39;make&#39;
    cd mjpg-streamer
    make mjpg_streamer input_file.so input_uvc.so output_http.so
    # install by copying
    sudo cp mjpg_streamer /usr/local/bin
    sudo cp output_http.so input_file.so input_uvc.so /usr/local/lib/
    sudo cp -R www /usr/local/www
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I GUESS YOU COULD JUST FOLLOW &#39;USB CAMERA&#39; AND IT WOULD WORK FOR BOTH
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;start the raspberry pi camera module&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    mkdir /tmp/stream  
    raspistill --nopreview -w 640 -h 480 -q 5 -o /tmp/stream/pic.jpg -tl 100 -t 9999999 -th 0:0:0 &amp;amp;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;start mjpg-streamer for raspberry pi camera module. This streams using ‘&lt;strong&gt;input_file.so&lt;/strong&gt;’&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    LD_LIBRARY_PATH=/usr/local/lib  
    mjpg_streamer -i &quot;input_file.so -f /tmp/stream -n pic.jpg&quot; -o &quot;output_http.so -w /usr/local/www&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;build-for-usb-camera&quot;&gt;(2) build for usb camera&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Plug in usb camera and verify it is automatically identified using ‘lsusb’. If it is not you need to get a different camera or go down the rabbit-hole of installing linux drivers (beyond the scope of this post).&lt;/p&gt;

    &lt;p&gt;~~~
  pi@pi50 ~ $ lsusb&lt;br /&gt;
  Bus 001 Device 002: ID 0424:9512 Standard Microsystems Corp.&lt;br /&gt;
  Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub&lt;br /&gt;
  Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp.&lt;br /&gt;
  Bus 001 Device 004: ID 1a40:0201 Terminus Technology Inc. FE 2.1 7-port Hub&lt;br /&gt;
  Bus 001 Device 005: ID 1415:2000 Nam Tai E&amp;amp;E Products Ltd. or OmniVision Technologies, Inc. Sony Playstation Eye&lt;br /&gt;
~~~&lt;/p&gt;

    &lt;p&gt;The last entry is my camera, a ‘Sony Playstation Eye’.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;install v4l-utils (THESE ARE WRONG !!!!!!!!!!!!!!!!)&lt;/p&gt;

    &lt;p&gt;Getting v4l2 on the raspberry is witchcraft, as of march 2015 it seems to be installed by default???
  &amp;gt; sudo apt-get install v4l2-utils
  &amp;gt; sudo apt-get install uv4l2 uv4l2-raspicam&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check the parameters of our USB camera&lt;/p&gt;

    &lt;p&gt;~~~
  v4l2-ctl –list-formats&lt;/p&gt;

    &lt;p&gt;ioctl: VIDIOC_ENUM_FMT&lt;br /&gt;
      Index       : 0&lt;br /&gt;
      Type        : Video Capture&lt;br /&gt;
      Pixel Format: ‘YUYV’&lt;br /&gt;
      Name        : YUYV&lt;br /&gt;
~~~&lt;/p&gt;

    &lt;p&gt;The YUYV is very important, I need to pass a -y option to jpg_streamer –input command. If you see MPEG you don’t need this -y switch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Here are some other commands to learn about calling conventions. This one told me who to pass -y for YUYV to.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    mjpg_streamer --input &quot;input_uvc.so --help&quot;
    # note, i am not showing the output here
    # important line in output is this:
    #  [-y | --yuv ]..........: enable YUYV format and disable MJPEG mode
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;build and install for usb camera. Critical thing here is ‘&lt;strong&gt;input_uvc.so&lt;/strong&gt;’&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    # build with &#39;make&#39;
    cd mjpg-streamer
    make mjpg_streamer input_file.so input_uvc.so output_http.so
    # install by copying
    sudo cp mjpg_streamer /usr/local/bin
    sudo cp output_http.so input_file.so input_uvc.so /usr/local/lib/
    sudo cp -R www /usr/local/www
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;run mjpg-streamer to stream from usb camera&lt;/p&gt;

    &lt;p&gt;My usb camera uses YUYV, thus the ‘-y’&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    /usr/local/bin/mjpg_streamer -i &quot;/usr/local/lib/input_uvc.so -y&quot; -o &quot;/usr/local/lib/output_http.so -w /usr/local/www&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If my camera used MJPEG instead of YUYV, the command is the same without the &#39;-y&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    /usr/local/bin/mjpg_streamer -i &quot;/usr/local/lib/input_uvc.so&quot; -o &quot;/usr/local/lib/output_http.so -w /usr/local/www&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;done&quot;&gt;done&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>Use OpenCV to acquire video</title>
   <link href="http://blog.cudmore.io/post/2015/03/07/use-opencv-to-acquire-video/"/>
   <updated>2015-03-07T17:01:06-05:00</updated>
   <id>http://blog.cudmore.io/post/2015/03/07/use-opencv-to-acquire-video</id>
   <content type="html">&lt;h4 id=&quot;goals&quot;&gt;Goals&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Use raspberry to record video from USB camera and stream to disk.&lt;/li&gt;
  &lt;li&gt;Use python and opencv&lt;/li&gt;
  &lt;li&gt;will save either as a sequence of .tif or as an uncompressed videofile&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;install-opencv&quot;&gt;Install opencv&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;sudo apt-get update&lt;br /&gt;
sudo apt-get upgrade&lt;br /&gt;
sudo apt-get install libopencv-dev python-opencv&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Remember that I have conda install of python in ‘/home/pi/miniconda/bin/python’.&lt;/li&gt;
  &lt;li&gt;I need to use ‘/usr/bin/python’ instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;check-opencv-install&quot;&gt;Check opencv install&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@pi40 ~ $ /usr/bin/python  
Python 2.7.3 (default, Mar 18 2014, 05:13:23) 
[GCC 4.6.3] on linux2  
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.  
&amp;gt;&amp;gt;&amp;gt; import cv2  
&amp;gt;&amp;gt;&amp;gt; cv2.__version__  
&#39;2.4.1&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;install-usb-thumb-drive--usb-camera&quot;&gt;Install USB thumb drive + usb camera&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;after pluggin in usb drive + usb camera&lt;/p&gt;

    &lt;p&gt;pi@pi40 ~ $ lsusb&lt;br /&gt;
  Bus 001 Device 002: ID 0424:9512 Standard Microsystems Corp. 
  Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub&lt;br /&gt;
  Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. 
  Bus 001 Device 005: ID 1415:2000 Nam Tai E&amp;amp;E Products Ltd. or OmniVision Technologies, Inc. Sony Playstation Eye&lt;br /&gt;
  Bus 001 Device 004: ID 13fe:4100 Kingston Technology Company Inc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;got-some-pythonopencv-code-to-acquire&quot;&gt;Got some python/opencv code to acquire&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Acquires individual .tif files in a loop&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;to-do&quot;&gt;To do&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Check the frame rate by recording a clock&lt;/li&gt;
  &lt;li&gt;Add in template code for stop/start, start with keyboard and then move to GPIO&lt;/li&gt;
  &lt;li&gt;Get the DC60 STK1160 video to usb dongle working&lt;/li&gt;
  &lt;li&gt;This website says that it may just auto detect in newer linux kernels?
http://linuxtv.org/wiki/index.php/Stk1160# Making_it_Work&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;here-is-the-code&quot;&gt;Here is the code&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#/usr/bin/python

import numpy as np
import cv2

# initialize camera
cap = cv2.VideoCapture(0)
if cap is None:
    print &#39;Warning: unable to access camera&#39;

# stopPin = 7 # listen for a change on this pin to stop

# number of frames to acquire
numFrames = 30
currFrame = 0

# outfilebase = &#39;images/image&#39; # append number + .tif

print &#39;starting capture of &#39; + str(numFrames) + &#39; frames.&#39;
print &#39;press ctrl-c to stop ... eventually we will stop on a TTL&#39;
while(cap.isOpened()):
    try:
        ret, frame = cap.read()
        if ret==True:
            # flip frame
            # frame = cv2.flip(frame,0)

            # print frame.shape

            # write the flipped frame
            try:
                # out.write(frame)
                # cv2.SaveImage(&#39;file&#39; + str(currFrame) + &#39;.tif&#39;, frame)
                cv2.imwrite(&#39;images/image&#39; + str(currFrame) + &#39;.tif&#39;, frame)
            except:
                print &#39;Error in out.write() OR user hit ctrl-c&#39;
                break

            currFrame += 1
            # if (currFrame &amp;gt; numFrames):
            #    print &#39;finished &#39; + str(numFrames) + &#39; frames.&#39;
            #    break
    
        else:
            break

    except KeyboardInterrupt:
        print &#39;user hit ctrl-c&#39;
        print &#39;frames=&#39; + str(currFrame)
        break

# Release camera
cap.release()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Plotting with bokeh on the Raspberry Pi</title>
   <link href="http://blog.cudmore.io/post/2015/03/05/bokeh-on-the-raspberry-pi/"/>
   <updated>2015-03-05T17:01:06-05:00</updated>
   <id>http://blog.cudmore.io/post/2015/03/05/bokeh-on-the-raspberry-pi</id>
   <content type="html">&lt;p&gt;Goal is to get plotting with bokeh on the Raspberry Pi.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install continuum anaconda python distribution&lt;/li&gt;
  &lt;li&gt;Install bokeh plotting and get a plot server running&lt;/li&gt;
  &lt;li&gt;be able to run bokeh examples&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[UPDATE August 16, 2015]
[THIS IS NOT WORKING … REWRITING]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;don’t install miniconda, just use stock raspian pytohn&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# this takes &amp;gt; 1 hour on a Raspberry Pi Model B !!!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# most of the time is spent in gcc cc1 command&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upgrade&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;# after &amp;gt; 1 hour I get an error&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Successfully installed pandas python-dateutil pytz&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# OSError: [Errno 39] Directory not empty: &#39;/home/pi/build/pytz&#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# I am ignoring this pytz error (something to do with timezone library???)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# now i am sidetracked&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipython&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ipython seems ok&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this next one may take awhile, started at 1:50pm&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bokeh&lt;/span&gt;  
&lt;span class=&quot;c&quot;&gt;# seems ok, can import pandas in python but it gives error&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    /usr/local/lib/python2.7/dist-packages/pandas/computation/expressions.py:21: UserWarning: The installed version of numexpr 2.0.1 is not supported in pandas and will be not be used&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    The minimum supported version is 2.1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# fixed error with (hopefully does not cause other problems)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numexpr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upgrade&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;[ORIGINAL POST STARTS HERE]&lt;/p&gt;

&lt;h3 id=&quot;install-miniconda&quot;&gt;Install miniconda&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@pi40 ~ $ wget http://repo.continuum.io/miniconda/Miniconda-3.5.5-Linux-armv6l.sh
pi@pi40 ~ $ bash Miniconda-3.5.5-Linux-armv6l.sh 

Miniconda will now be installed into this location:
/home/pi/miniconda

  - Press ENTER to confirm the location
  - Press CTRL-C to abort the installation
  - Or specify an different location below

[/home/pi/miniconda] &amp;gt;&amp;gt;&amp;gt; 
PREFIX=/home/pi/miniconda
installing: python-2.7.7-0 ...
installing: openssl-1.0.1h-0 ...
installing: pycosat-0.6.1-py27_0 ...
installing: pyyaml-3.11-py27_0 ...
installing: requests-2.3.0-py27_0 ...
installing: yaml-0.1.4-0 ...
installing: conda-3.5.5-py27_0 ...
Python 2.7.7 :: Continuum Analytics, Inc.
creating default environment...
installation finished.
Do you wish the installer to prepend the Miniconda install location
to PATH in your /home/pi/.bashrc ? [yes|no]
[no] &amp;gt;&amp;gt;&amp;gt; yes

Prepending PATH=/home/pi/miniconda/bin to PATH in /home/pi/.bashrc
A backup will be made to: /home/pi/.bashrc-miniconda.bak


For this change to become active, you have to open a new terminal.

Thank you for installing Miniconda!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;make-sure-numpy-and-pandas-is-correct&quot;&gt;Make sure numpy and pandas is correct&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;pip install numpy –upgrade&lt;br /&gt;
pip install pandas –upgrade&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;install-bokeh&quot;&gt;Install bokeh&lt;/h3&gt;
&lt;p&gt;In general ‘conda install bokeh’ does not work on Pi, bokeh is not in repo?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;pip install bokeh&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a list of required packages, see http://bokeh.pydata.org/en/latest/tutorial/quick_install.html&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from: http://bokeh.pydata.org/en/latest/tutorial/quick_install.html
Ideally, you should have the following libraries installed:

NumPy
Flask
Redis
Requests
gevent
gevent-websocket
Pandas
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;currently-installed-with-pip&quot;&gt;Currently installed with pip&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@pi40 ~ $ pip freeze
Flask==0.10.1
Flask-Markdown==0.3
Flask-Misaka==0.3.0
Flask-SocketIO==0.5.0
Jinja2==2.7.3
Markdown==2.6
MarkupSafe==0.23
PyYAML==3.11
Pygments==2.0.2
RPi.GPIO==0.5.11
Werkzeug==0.10.1
backports.ssl-match-hostname==3.4.0.2
bokeh==0.8.1
colorama==0.3.3
conda==3.5.5
gevent==1.0.1
gevent-socketio==0.3.6
gevent-websocket==0.9.3
greenlet==0.4.5
ipython==2.1.0
itsdangerous==0.24
misaka==1.0.2
nose==1.3.0
numpy==1.9.2
pandas==0.15.2
psutil==2.2.1
pycosat==0.6.1
pystache==0.5.4
python-dateutil==2.4.1
pytz==2014.10
pyzmq==14.5.0
requests==2.3.0
six==1.9.0
tornado==4.1
websocket==0.2.1
wsgiref==0.1.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;grab-some-example-plots-from-bokeh-github&quot;&gt;Grab some example plots from bokeh github&lt;/h3&gt;

&lt;p&gt;The bokeh example plots are at:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://github.com/bokeh/bokeh/tree/master/examples/plotting/server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;run-the-bokeh-server&quot;&gt;Run the bokeh-server&lt;/h3&gt;
&lt;p&gt;Remember, this make temporary files in directory you run it in.&lt;/p&gt;

&lt;p&gt;–ip 0.0.0.0 will redirect the server to your external IP, in my case http://192.168.1.40:5006&lt;br /&gt;
&amp;gt; 
&amp;gt; bokeh-server –backend=memory –ip 0.0.0.0&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@pi40 ~/bokeh_examples $ bokeh-server --backend=memory --ip 0.0.0.0
No module named scipy

    Bokeh Server Configuration
    ==========================
    python version : 2.7.8
    bokeh version  : 0.8.1
    listening      : 0.0.0.0:5006
    backend        : memory
    python options : debug:OFF, verbose:OFF, filter-logs:OFF, multi-user:OFF
    js options     : splitjs:OFF, debugjs:OFF
    
/home/pi/miniconda/lib/python2.7/site-packages/bokeh/server/blaze/__init__.py:19: UserWarning: could not import multiuser blaze server No module named blaze.  This is fine if you do not intend to use blaze capabilities in the bokeh server
  warnings.warn(msg)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;example-plots-i-have-working&quot;&gt;Example plots I have working&lt;/h3&gt;

&lt;p&gt;line_animate.py&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# The plot server must be running
# Go to http://localhost:5006/bokeh to view this plot

import time

import numpy as np

from bokeh.plotting import *

N = 80

x = np.linspace(0, 4*np.pi, N)
y = np.sin(x)

output_server(&quot;line_animate&quot;)

p = figure()

p.line(x, y, color=&quot;# 3333ee&quot;, name=&quot;sin&quot;)
p.line([0,4*np.pi], [-1, 1], color=&quot;# ee3333&quot;)

show(p)

renderer = p.select(dict(name=&quot;sin&quot;))
ds = renderer[0].data_source

while True:
    for i in np.hstack((np.linspace(1, -1, 100), np.linspace(-1, 1, 100))):
        ds.data[&quot;y&quot;] = y * i
        cursession().store_objects(ds)
        time.sleep(0.05)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;now-use-flask--bokeh-to-generate-a-single-html-page-no-bokeh-server&quot;&gt;Now use Flask + bokeh to generate a single html page (no bokeh-server)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;eventual goal here is to have Flask server inject new data (via socketio) into html page with bokeh plot by modifying x/y data with javascript (on the client)&lt;/li&gt;
  &lt;li&gt;simple example that works: https://github.com/bokeh/bokeh/tree/master/examples/embed/simple&lt;/li&gt;
  &lt;li&gt;more complex: https://github.com/bokeh/bokeh/tree/master/examples/embed/spectrogram&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;http://bokeh.pydata.org/en/latest/index.html&lt;/li&gt;
  &lt;li&gt;http://docs.continuum.io/anaconda/install.html&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Python calling bash to get drive space remaining</title>
   <link href="http://blog.cudmore.io/2014/12/24/Python-calling-bash-to-get-drive-space-remaining/"/>
   <updated>2014-12-24T00:00:00-05:00</updated>
   <id>http://blog.cudmore.io/2014/12/24/Python-calling-bash-to-get-drive-space-remaining</id>
   <content type="html">&lt;p&gt;I need to have some Python code tell me how much drive space is left. Here is what I came up with.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import subprocess as sub
&amp;gt;&amp;gt;&amp;gt; checkPath = &#39;~/video&#39;
&amp;gt;&amp;gt;&amp;gt; cmd = &quot;df &quot; + checkPath + &quot; | awk &#39;{ print $5 }&#39; | tail -n 1&quot;
&amp;gt;&amp;gt;&amp;gt; p = sub.Popen(cmd, stdout=sub.PIPE,stderr=sub.PIPE, shell=True)
&amp;gt;&amp;gt;&amp;gt; (out, err) = p.communicate()
&amp;gt;&amp;gt;&amp;gt; out
&#39;31%\n&#39;
&amp;gt;&amp;gt;&amp;gt; out.rstrip() # rstrip &#39;chomps&#39; off newline
&#39;31%&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Monitoring mice in their home cage</title>
   <link href="http://blog.cudmore.io/post/2014/02/14/Monitoring-mice-in-their-home-cage/"/>
   <updated>2014-02-14T17:01:06-05:00</updated>
   <id>http://blog.cudmore.io/post/2014/02/14/Monitoring mice in their home cage</id>
   <content type="html">&lt;p&gt;[Aug 4, 2014, updated]
[March 2015, moved to cudmore.github.io]&lt;/p&gt;

&lt;h2 id=&quot;goal&quot;&gt;Goal&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;videotape mice in their home cage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;parts&quot;&gt;Parts&lt;/h3&gt;
&lt;p&gt;#### Computer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi, Model B 512MB RAM, [Adafruit 998](http://www.adafruit.com/products/998) target=&quot;_blank&quot;&amp;gt;Adafruit 998&lt;/li&gt;
	&lt;li&gt;4 GB SD Card, &lt;a href=&quot;http://www.adafruit.com/products/102&quot; target=&quot;_blank&quot;&gt;Adafruit 102&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;USB 2 Wifi Dongle (802.11b/g/n), &lt;a href=&quot;http://www.adafruit.com/products/814&quot; target=&quot;_blank&quot;&gt;Adafruit, 814&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;USB 2 Powered Hub, 5V 2A, &lt;a href=&quot;http://www.adafruit.com/products/961&quot; target=&quot;_blank&quot;&gt;Adafruit, 961&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;USB 2 hard-drive, Old laptop drive with a SATA to USB 2 connector&lt;/li&gt;
	&lt;li&gt;5V 1A AC to DC converter, &lt;a href=&quot;http://www.adafruit.com/products/501&quot; target=&quot;_blank&quot;&gt;Adafruit, 501&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Video&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;Raspberry Pi NoIR camera, &lt;a href=&quot;http://www.adafruit.com/products/1567&quot; target=&quot;_blank&quot;&gt;Adafruit, 1567&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;12&quot; flex cable for Raspberry Pi NoIR Camera, &lt;a href=&quot;http://www.adafruit.com/products/1648&quot; target=&quot;_blank&quot;&gt;Adafruit, 1648&lt;/a&gt; (24&quot;, &lt;a href=&quot;https://www.adafruit.com/products/1731&quot; target=&quot;_blank&quot;&gt;Adafruit 1731&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;4x Right-angle 1/2&quot; post clamps, &lt;a href=&quot;http://search.newport.com/?q=*&amp;amp;x2=sku&amp;amp;q2=CA-1&quot; target=&quot;_blank&quot;&gt;Newport CA-1&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Mini Ball Head, &lt;a href=&quot;http://www.bhphotovideo.com/c/product/221096-REG/Giottos_MH1004_320_MH_1004_Mini_Ball.html&quot; target=&quot;_blank&quot;&gt;B&amp;amp;H Giottos MH1004&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;1/2&quot; hollow aluminum tubes, these are cheap and easily cut with hack-saw, &lt;a href=&quot;http://www.homedepot.com/p/Allied-Tube-Conduit-1-2-in-x-10-ft-Electric-Metallic-Tube-Conduit-101543/100400405&quot; target=&quot;_blank&quot;&gt;Home Depot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Lights&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;2x LED Driver, 12VDC 700 MA, &lt;a href=&quot;https://www.superbrightleds.com/moreinfo/led-drivers/700ma-constant-current-led-driver/1323/3045/&quot; target=&quot;_blank&quot;&gt;SuperBrightLeds, CCD-700&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;4x LED PCB,  &lt;a href=&quot;http://www.superbrightleds.com/moreinfo/bare-circuit-boards/universal-4-led-miniature-wedge-base-pcb-mled-pcb/403/1387/&quot; target=&quot;_blank&quot;&gt;SuperBrightleds, MLED-PCB, 84778101387&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;2x Mosfet PCB, &lt;a href=&quot;https://www.sparkfun.com/products/10256&quot; target=&quot;_blank&quot;&gt;Sparkfun, COM-10256&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;LED - Super Bright White (25 pack)&lt;/li&gt;
	&lt;li&gt;LED - Infrared 850nm (25 pack), &lt;a href=&quot;https://www.sparkfun.com/products/9854&quot; target=&quot;_blank&quot;&gt;Sparkfun COM-09854&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;LED - Infrared 950nm (25 pack), &lt;a href=&quot;https://www.sparkfun.com/products/10557&quot; target=&quot;_blank&quot;&gt;Sparkfun COM-10557&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;2x LED Light Bar - White (SMD), &lt;a href=&quot;https://www.sparkfun.com/products/12014&quot; target=&quot;_blank&quot;&gt;Sparkfun, COM-12014&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Light Holders,&lt;b&gt; &lt;/b&gt;25 lb circular magnets, 3 foot threaded rods, screws, washers (Ace Hardware)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Running Wheels&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;Empty running wheels from &lt;a href=&quot;http://www.med-associates.com/product/low-profile-wireless-running-wheel-for-mouse/&quot; target=&quot;_blank&quot;&gt;Med Associates&lt;/a&gt; (find cheaper solution)&lt;/li&gt;
	&lt;li&gt;2 Hall Effect sensors per wheel (Optek/TT O090U), &lt;a href=&quot;http://www.mouser.com/ProductDetail/Optek-TT-electronics/OH090U/?qs=MYMjFsmMg9Zxhz344sS0jg==&quot; target=&quot;_blank&quot;&gt;Mouser 828-OH090U&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Miscellaneous Sensors&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;Visible light sensor (Vishay, TEPT5600), &lt;a href=&quot;http://www.mouser.com/ProductDetail/Vishay/TEPT5600/?qs=%2fha2pyFadujUHPassviAP51fh4B6FFdxq%2fQn0JoB63RFxPBe7%2ffCXA%3d%3d&quot; target=&quot;_blank&quot;&gt;Mouser 782-TEPT5600&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;IR sensor (Vishay BPW83), &lt;a href=&quot;http://www.mouser.com/ProductDetail/Vishay/BPW83/?qs=%2fha2pyFaduiEcAuMy5rpt15ObB2haiIvhq3aASHM7R0%3d&quot; target=&quot;_blank&quot;&gt;Mouser 782-BPW83&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Temperature and Humidity Sensor (AM2302 wired DHT22), &lt;a href=&quot;http://www.adafruit.com/products/393&quot; target=&quot;_blank&quot;&gt;Adafruit 393&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Acquisition Software (&lt;/strong&gt;Python scripts running in Pi)&lt;/p&gt;

&lt;p&gt;Script 1:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Acquires sequential 5 minute videos and save each to a timestamped .h264 file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Script 2:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Turns IR and White lights on and off, uses time-of-day from Raspberry Linux.&lt;/li&gt;
	&lt;li&gt;Reads from IR and visible light sensors to check light levels and sends an email if either IR or white lights burn out.&lt;/li&gt;
	&lt;li&gt;Reads temperature and humidity.&lt;/li&gt;
	&lt;li&gt;Reads wheel turn events using low level GPIO callbacks to get more accurate time.&lt;/li&gt;
	&lt;li&gt;Logs all of this to text file locally on Raspberry.&lt;/li&gt;
	&lt;li&gt;Pushes all of this to online web server so I can check if the mice have been running. &lt;del&gt;Remote webserver has a PHP script to accept and save name/value pairs of data&lt;/del&gt;. Now using mySQL on external web server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Software Analysis&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Python/OpenCV motion detection using a modified version of &lt;a href=&quot;http://derek.simkowiak.net/motion-tracking-with-python/&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; (Thanks to Derek Simkowiak). Motion detection does not run on Pi, runs offline on desktop/laptop (OS X)&lt;/li&gt;
	&lt;li&gt;In future, write in C++/OpenCV using &lt;a href=&quot;http://sundararajana.blogspot.com/2007/05/motion-detection-using-opencv.html&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a title=&quot;Setting up Python, OpenCV and ffmpeg in OSX&quot; href=&quot;http://www.robertcudmore.org/blog/?p=183&quot; target=&quot;_blank&quot;&gt;How to install Python/OpenCV/ffmpeg on OSX&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Another project to monitor a hamster in their cage, &lt;a href=&quot;http://www.raspberrypi.org/learning/hamster-party-cam/&quot;&gt;the hamster party-cam&lt;/a&gt; (from the Raspberry people).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;=====================================================================&lt;/p&gt;
&lt;h3&gt;Wish List&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Sensors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;del&gt;Temperature and Humidity sensor, &lt;a href=&quot;http://www.adafruit.com/products/393&quot; target=&quot;_blank&quot;&gt;Adafruit, 393&lt;/a&gt;, $15&lt;/del&gt;&lt;/li&gt;
	&lt;li&gt;&lt;del&gt;Upgrade temperature/humidity to something like, &lt;a href=&quot;http://www.adafruit.com/products/1293&quot; target=&quot;_blank&quot;&gt;Adafruit 1293&lt;/a&gt;, $30, no tutorials 2/14/14&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Camera Holder&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;del&gt;Right-angle 1/2&quot; post clamps, &lt;a href=&quot;http://www.thorlabs.com/thorProduct.cfm?partNumber=RA90&quot; target=&quot;_blank&quot;&gt;Thor Labs, RA90&lt;/a&gt; (google image search for &#39;Right Angle Clamp rod&#39;). Will order Newport right-angle post clamp, Newport &lt;a href=&quot;http://search.newport.com/?q=*&amp;amp;x2=sku&amp;amp;q2=CA-1&quot; target=&quot;_blank&quot;&gt;CA-1&lt;/a&gt;. In general, it seems that any kind of post system with clamps, junctions, and T&#39;s triples in price as soon as the post/rod diameter goes below 1/2&quot;. Because I need many of these post clamps, 3-4 for camera and 3-4 for lights) I will stick with the 1/2&quot; variety. My choice to go with Newport is based on &lt;a href=&quot;http://mousevr.blogspot.com/2011_09_01_archive.html&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; comment.&lt;/del&gt;&lt;/li&gt;
	&lt;li&gt;&lt;del&gt;1/2&quot; aluminum OR wood tubes/dowels&lt;/del&gt;&lt;/li&gt;
	&lt;li&gt;&lt;del&gt;12&quot; flex cable for Raspberry Pi NoIR Camera, &lt;a href=&quot;http://www.adafruit.com/products/1648&quot; target=&quot;_blank&quot;&gt;Adafruit, 1648&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;=====================================================================&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;Temp/Humidity Sensor (DHT22) spits out readings once per second (fine) and does it fast (not fine). On Raspberry Pi this requires some C code to read ‘bit-banged’ sensor output. See &lt;a href=&quot;http://learn.adafruit.com/dht-humidity-sensing-on-raspberry-pi-with-gdocs-logging&quot; target=&quot;_blank&quot;&gt;Adafruit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.adafruit.com/products/1293&quot; target=&quot;_blank&quot;&gt;AM2315&lt;/a&gt; is a more accurate temperature/humidity sensor, and data comes in via I2C. This particular sensor has a fixed address.&lt;/p&gt;

&lt;p&gt;The Pi NoIR camera is just the standard Pi camera with the IR filter removed. Right now there are no detailed specs on the nm sensitivity of the NoIR camera, the IR filter or the original camera for that matter. According to the &lt;a href=&quot;http://elinux.org/Rpi_Camera_Module&quot; target=&quot;_blank&quot;&gt;Embedded Linux Wiki&lt;/a&gt;, the Pi NoIR camera has a CMOS &lt;a href=&quot;http://www.ovt.com/products/sensor.php?id=66&quot; target=&quot;_blank&quot;&gt;Omnivision 5647 CMOS&lt;/a&gt; chip. Also see the pdf &lt;a href=&quot;http://www.ovt.com/download_document.php?type=sensor&amp;amp;sensorid=66&quot; target=&quot;_blank&quot;&gt;spec/ad sheet&lt;/a&gt;. &lt;a href=&quot;http://www.aphesa.com&quot; target=&quot;_blank&quot;&gt;Aphesa&lt;/a&gt; has some pretty in depth discussion of the &lt;a href=&quot;http://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=3&amp;amp;ved=0CDoQFjAC&amp;amp;url=http%3A%2F%2Fwww.aphesa.com%2Fdownloads%2Fdownload2.php%3Fid%3D1&amp;amp;ei=6DX-UryPKMXb0wGq4YHgBg&amp;amp;usg=AFQjCNG9S8Vix59mZKa5fYeZ-mvSw0ZaOQ&amp;amp;sig2=eRzJXiMlOerKKYQ4RmtkKA&amp;amp;bvm=bv.61190604,d.dmQ&quot; target=&quot;_blank&quot;&gt;spectral response properties of silicon image sensors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I tried 950nm LEDs and got a pretty grainy video, I switched to 850 nm LEDs and the image is brighter and less grainy (as expected). In both these cases, the camera is about 20” from subject and IR  lights are off to the left and right, 4 LEDs on the left and 4 LEDs on the right. See &lt;a href=&quot;http://www.raspberrypi.org/forum/viewtopic.php?f=43&amp;amp;t=60103&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; discussion and &lt;a href=&quot;http://www.raspberrypi.org/phpBB3/viewtopic.php?f=43&amp;amp;t=48787&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for a guess at the spectral sensitivity.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;span style=&quot;font-size: 1rem; line-height: 1.714285714;&quot;&gt;-Try -night switch for video with IR LEDs.&lt;/span&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;-&lt;/span&gt;&lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;http://www.lukasz-skalski.com/category/software/&quot; target=&quot;_blank&quot;&gt;Raspberry Control&lt;/a&gt;&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;, a general purpose Android based Raspberry Pi Controller.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt; Camera board has 2mm screw holes, see &lt;/span&gt;&lt;a style=&quot;line-height: 1.714285714; font-size: 1rem;&quot; href=&quot;http://www.scribd.com/doc/142718448/Raspberry-Pi-Camera-Mechanical-Data&quot; target=&quot;_blank&quot;&gt;Gert’s drawings&lt;/a&gt;&lt;span style=&quot;line-height: 1.714285714; font-size: 1rem;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</content>
 </entry>
 

</feed>
